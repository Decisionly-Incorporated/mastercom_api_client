/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MasterCom);
  }
}(this, function(expect, MasterCom) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MasterCom.SingleMessageSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SingleMessageSummary', function() {
    it('should create an instance of SingleMessageSummary', function() {
      // uncomment below and update the code to test SingleMessageSummary
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be.a(MasterCom.SingleMessageSummary);
    });

    it('should have the property acquirerReferenceNumber (base name: "acquirerReferenceNumber")', function() {
      // uncomment below and update the code to test the property acquirerReferenceNumber
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property adviceReasonCode (base name: "adviceReasonCode")', function() {
      // uncomment below and update the code to test the property adviceReasonCode
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property localCurrencyCode (base name: "localCurrencyCode")', function() {
      // uncomment below and update the code to test the property localCurrencyCode
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property localRequestedAmount (base name: "localRequestedAmount")', function() {
      // uncomment below and update the code to test the property localRequestedAmount
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property merchantName (base name: "merchantName")', function() {
      // uncomment below and update the code to test the property merchantName
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property merchantType (base name: "merchantType")', function() {
      // uncomment below and update the code to test the property merchantType
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property primaryAccountNumber (base name: "primaryAccountNumber")', function() {
      // uncomment below and update the code to test the property primaryAccountNumber
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property processingCode (base name: "processingCode")', function() {
      // uncomment below and update the code to test the property processingCode
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property responseCode (base name: "responseCode")', function() {
      // uncomment below and update the code to test the property responseCode
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property responseSource (base name: "responseSource")', function() {
      // uncomment below and update the code to test the property responseSource
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property settlementDate (base name: "settlementDate")', function() {
      // uncomment below and update the code to test the property settlementDate
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property switchSerialNumber (base name: "switchSerialNumber")', function() {
      // uncomment below and update the code to test the property switchSerialNumber
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property switchDateTime (base name: "switchDateTime")', function() {
      // uncomment below and update the code to test the property switchDateTime
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property trace (base name: "trace")', function() {
      // uncomment below and update the code to test the property trace
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

    it('should have the property tranType (base name: "tranType")', function() {
      // uncomment below and update the code to test the property tranType
      //var instance = new MasterCom.SingleMessageSummary();
      //expect(instance).to.be();
    });

  });

}));
