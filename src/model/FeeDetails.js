/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeeDetails model module.
 * @module model/FeeDetails
 * @version v6
 */
class FeeDetails {
    /**
     * Constructs a new <code>FeeDetails</code>.
     * @alias module:model/FeeDetails
     */
    constructor() { 
        
        FeeDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeeDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeeDetails} obj Optional instance to populate.
     * @return {module:model/FeeDetails} The populated <code>FeeDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeeDetails();

            if (data.hasOwnProperty('cardAcceptorIdCode')) {
                obj['cardAcceptorIdCode'] = ApiClient.convertToType(data['cardAcceptorIdCode'], 'String');
            }
            if (data.hasOwnProperty('cardNumber')) {
                obj['cardNumber'] = ApiClient.convertToType(data['cardNumber'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('feeDate')) {
                obj['feeDate'] = ApiClient.convertToType(data['feeDate'], 'String');
            }
            if (data.hasOwnProperty('destinationMember')) {
                obj['destinationMember'] = ApiClient.convertToType(data['destinationMember'], 'String');
            }
            if (data.hasOwnProperty('feeId')) {
                obj['feeId'] = ApiClient.convertToType(data['feeId'], 'String');
            }
            if (data.hasOwnProperty('feeAmount')) {
                obj['feeAmount'] = ApiClient.convertToType(data['feeAmount'], 'String');
            }
            if (data.hasOwnProperty('creditSender')) {
                obj['creditSender'] = ApiClient.convertToType(data['creditSender'], 'Boolean');
            }
            if (data.hasOwnProperty('creditReceiver')) {
                obj['creditReceiver'] = ApiClient.convertToType(data['creditReceiver'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('rejectReason')) {
                obj['rejectReason'] = ApiClient.convertToType(data['rejectReason'], 'String');
            }
            if (data.hasOwnProperty('chargebackRefNum')) {
                obj['chargebackRefNum'] = ApiClient.convertToType(data['chargebackRefNum'], 'String');
            }
            if (data.hasOwnProperty('reconciliationAmount')) {
                obj['reconciliationAmount'] = ApiClient.convertToType(data['reconciliationAmount'], 'String');
            }
            if (data.hasOwnProperty('reconciliationCurrency')) {
                obj['reconciliationCurrency'] = ApiClient.convertToType(data['reconciliationCurrency'], 'String');
            }
            if (data.hasOwnProperty('japanCommonMerchantCode')) {
                obj['japanCommonMerchantCode'] = ApiClient.convertToType(data['japanCommonMerchantCode'], 'String');
            }
            if (data.hasOwnProperty('installmentData')) {
                obj['installmentData'] = ApiClient.convertToType(data['installmentData'], 'String');
            }
            if (data.hasOwnProperty('flexCode')) {
                obj['flexCode'] = ApiClient.convertToType(data['flexCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeeDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeeDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cardAcceptorIdCode'] && !(typeof data['cardAcceptorIdCode'] === 'string' || data['cardAcceptorIdCode'] instanceof String)) {
            throw new Error("Expected the field `cardAcceptorIdCode` to be a primitive type in the JSON string but got " + data['cardAcceptorIdCode']);
        }
        // ensure the json data is a string
        if (data['cardNumber'] && !(typeof data['cardNumber'] === 'string' || data['cardNumber'] instanceof String)) {
            throw new Error("Expected the field `cardNumber` to be a primitive type in the JSON string but got " + data['cardNumber']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['feeDate'] && !(typeof data['feeDate'] === 'string' || data['feeDate'] instanceof String)) {
            throw new Error("Expected the field `feeDate` to be a primitive type in the JSON string but got " + data['feeDate']);
        }
        // ensure the json data is a string
        if (data['destinationMember'] && !(typeof data['destinationMember'] === 'string' || data['destinationMember'] instanceof String)) {
            throw new Error("Expected the field `destinationMember` to be a primitive type in the JSON string but got " + data['destinationMember']);
        }
        // ensure the json data is a string
        if (data['feeId'] && !(typeof data['feeId'] === 'string' || data['feeId'] instanceof String)) {
            throw new Error("Expected the field `feeId` to be a primitive type in the JSON string but got " + data['feeId']);
        }
        // ensure the json data is a string
        if (data['feeAmount'] && !(typeof data['feeAmount'] === 'string' || data['feeAmount'] instanceof String)) {
            throw new Error("Expected the field `feeAmount` to be a primitive type in the JSON string but got " + data['feeAmount']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['rejectReason'] && !(typeof data['rejectReason'] === 'string' || data['rejectReason'] instanceof String)) {
            throw new Error("Expected the field `rejectReason` to be a primitive type in the JSON string but got " + data['rejectReason']);
        }
        // ensure the json data is a string
        if (data['chargebackRefNum'] && !(typeof data['chargebackRefNum'] === 'string' || data['chargebackRefNum'] instanceof String)) {
            throw new Error("Expected the field `chargebackRefNum` to be a primitive type in the JSON string but got " + data['chargebackRefNum']);
        }
        // ensure the json data is a string
        if (data['reconciliationAmount'] && !(typeof data['reconciliationAmount'] === 'string' || data['reconciliationAmount'] instanceof String)) {
            throw new Error("Expected the field `reconciliationAmount` to be a primitive type in the JSON string but got " + data['reconciliationAmount']);
        }
        // ensure the json data is a string
        if (data['reconciliationCurrency'] && !(typeof data['reconciliationCurrency'] === 'string' || data['reconciliationCurrency'] instanceof String)) {
            throw new Error("Expected the field `reconciliationCurrency` to be a primitive type in the JSON string but got " + data['reconciliationCurrency']);
        }
        // ensure the json data is a string
        if (data['japanCommonMerchantCode'] && !(typeof data['japanCommonMerchantCode'] === 'string' || data['japanCommonMerchantCode'] instanceof String)) {
            throw new Error("Expected the field `japanCommonMerchantCode` to be a primitive type in the JSON string but got " + data['japanCommonMerchantCode']);
        }
        // ensure the json data is a string
        if (data['installmentData'] && !(typeof data['installmentData'] === 'string' || data['installmentData'] instanceof String)) {
            throw new Error("Expected the field `installmentData` to be a primitive type in the JSON string but got " + data['installmentData']);
        }
        // ensure the json data is a string
        if (data['flexCode'] && !(typeof data['flexCode'] === 'string' || data['flexCode'] instanceof String)) {
            throw new Error("Expected the field `flexCode` to be a primitive type in the JSON string but got " + data['flexCode']);
        }

        return true;
    }


}



/**
 * Merchant Id associated with this fee collection..if any
 * @member {String} cardAcceptorIdCode
 */
FeeDetails.prototype['cardAcceptorIdCode'] = undefined;

/**
 * Card number when required by the reason code
 * @member {String} cardNumber
 */
FeeDetails.prototype['cardNumber'] = undefined;

/**
 * Code identifying the country
 * @member {String} countryCode
 */
FeeDetails.prototype['countryCode'] = undefined;

/**
 * Currency of the fee
 * @member {String} currency
 */
FeeDetails.prototype['currency'] = undefined;

/**
 * Date the fee was attached to the claim
 * @member {String} feeDate
 */
FeeDetails.prototype['feeDate'] = undefined;

/**
 * Destination member for the fee collection
 * @member {String} destinationMember
 */
FeeDetails.prototype['destinationMember'] = undefined;

/**
 * Identifier assigned to the fee
 * @member {String} feeId
 */
FeeDetails.prototype['feeId'] = undefined;

/**
 * Amount of the fee.    - When the amount is a credit to the sender of the fee collection, the value of feeAmount is positive.    - When the amount is a debit to the sender of the fee collection, the value of feeAmount is negative.    - When the amount is a credit to the receiver of the fee collection, the value of feeAmount is negative.    - When the amount is a debit to the receiver of the fee collection, the value of feeAmount is positive.    See also the creditSender and creditReceiver parameters.
 * @member {String} feeAmount
 */
FeeDetails.prototype['feeAmount'] = undefined;

/**
 * Credit the Sender
 * @member {Boolean} creditSender
 */
FeeDetails.prototype['creditSender'] = undefined;

/**
 * Credit the Receiver
 * @member {Boolean} creditReceiver
 */
FeeDetails.prototype['creditReceiver'] = undefined;

/**
 * Message regarding fee
 * @member {String} message
 */
FeeDetails.prototype['message'] = undefined;

/**
 * Collection Reason Code
 * @member {String} reason
 */
FeeDetails.prototype['reason'] = undefined;

/**
 * Fee reject reason.
 * @member {String} rejectReason
 */
FeeDetails.prototype['rejectReason'] = undefined;

/**
 * Contains card issuer reference data for a specific cardholder transaction. This number must be unique within BIN. It is used to track the chargeback throughout its life cycle
 * @member {String} chargebackRefNum
 */
FeeDetails.prototype['chargebackRefNum'] = undefined;

/**
 * Reconciliation amount of the fee. Amount will only be retrieved by the receiver side of the fee
 * @member {String} reconciliationAmount
 */
FeeDetails.prototype['reconciliationAmount'] = undefined;

/**
 * Reconciliation currency of the fee. Currency will only be retrieved by the receiver side of the fee
 * @member {String} reconciliationCurrency
 */
FeeDetails.prototype['reconciliationCurrency'] = undefined;

/**
 * Identifies the merchant's category in Japan referred to as the Common Merchant Category Code (CMC). Mastercard uses this value to identify a link to a corresponding Mastercard Assigned ID.
 * @member {String} japanCommonMerchantCode
 */
FeeDetails.prototype['japanCommonMerchantCode'] = undefined;

/**
 * Provides information about the installment payment option selected by the cardholder at the point of interaction.
 * @member {String} installmentData
 */
FeeDetails.prototype['installmentData'] = undefined;

/**
 * Specific to Brazil Flex Card transactions to communicate the product code used for clearing.
 * @member {String} flexCode
 */
FeeDetails.prototype['flexCode'] = undefined;






export default FeeDetails;

