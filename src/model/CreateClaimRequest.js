/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateClaimRequest model module.
 * @module model/CreateClaimRequest
 * @version v6
 */
class CreateClaimRequest {
    /**
     * Constructs a new <code>CreateClaimRequest</code>.
     * @alias module:model/CreateClaimRequest
     * @param disputedAmount {String} Amount disputed in the claim   Length: 4-12   Valid Values/Format: Numeric
     * @param disputedCurrency {String} Currency of amount disputed in the claim. disputedCurrency can be provided as standard alpha code or numeric code   Length: 3   Valid Values/Format: A-Z (Uppercase Alphabetic Letter) / Numeric
     * @param claimType {module:model/CreateClaimRequest.ClaimTypeEnum} Type of claim to be created.   Length: 8   Valid Values/Format: Standard
     * @param clearingTransactionId {String} The Clearing Transaction Identifier from Clearing Summary Results.   Length: N/A   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
     */
    constructor(disputedAmount, disputedCurrency, claimType, clearingTransactionId) { 
        
        CreateClaimRequest.initialize(this, disputedAmount, disputedCurrency, claimType, clearingTransactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, disputedAmount, disputedCurrency, claimType, clearingTransactionId) { 
        obj['disputedAmount'] = disputedAmount;
        obj['disputedCurrency'] = disputedCurrency;
        obj['claimType'] = claimType;
        obj['clearingTransactionId'] = clearingTransactionId;
    }

    /**
     * Constructs a <code>CreateClaimRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateClaimRequest} obj Optional instance to populate.
     * @return {module:model/CreateClaimRequest} The populated <code>CreateClaimRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateClaimRequest();

            if (data.hasOwnProperty('disputedAmount')) {
                obj['disputedAmount'] = ApiClient.convertToType(data['disputedAmount'], 'String');
            }
            if (data.hasOwnProperty('disputedCurrency')) {
                obj['disputedCurrency'] = ApiClient.convertToType(data['disputedCurrency'], 'String');
            }
            if (data.hasOwnProperty('claimType')) {
                obj['claimType'] = ApiClient.convertToType(data['claimType'], 'String');
            }
            if (data.hasOwnProperty('clearingTransactionId')) {
                obj['clearingTransactionId'] = ApiClient.convertToType(data['clearingTransactionId'], 'String');
            }
            if (data.hasOwnProperty('authTransactionId')) {
                obj['authTransactionId'] = ApiClient.convertToType(data['authTransactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateClaimRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateClaimRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateClaimRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['disputedAmount'] && !(typeof data['disputedAmount'] === 'string' || data['disputedAmount'] instanceof String)) {
            throw new Error("Expected the field `disputedAmount` to be a primitive type in the JSON string but got " + data['disputedAmount']);
        }
        // ensure the json data is a string
        if (data['disputedCurrency'] && !(typeof data['disputedCurrency'] === 'string' || data['disputedCurrency'] instanceof String)) {
            throw new Error("Expected the field `disputedCurrency` to be a primitive type in the JSON string but got " + data['disputedCurrency']);
        }
        // ensure the json data is a string
        if (data['claimType'] && !(typeof data['claimType'] === 'string' || data['claimType'] instanceof String)) {
            throw new Error("Expected the field `claimType` to be a primitive type in the JSON string but got " + data['claimType']);
        }
        // ensure the json data is a string
        if (data['clearingTransactionId'] && !(typeof data['clearingTransactionId'] === 'string' || data['clearingTransactionId'] instanceof String)) {
            throw new Error("Expected the field `clearingTransactionId` to be a primitive type in the JSON string but got " + data['clearingTransactionId']);
        }
        // ensure the json data is a string
        if (data['authTransactionId'] && !(typeof data['authTransactionId'] === 'string' || data['authTransactionId'] instanceof String)) {
            throw new Error("Expected the field `authTransactionId` to be a primitive type in the JSON string but got " + data['authTransactionId']);
        }

        return true;
    }


}

CreateClaimRequest.RequiredProperties = ["disputedAmount", "disputedCurrency", "claimType", "clearingTransactionId"];

/**
 * Amount disputed in the claim   Length: 4-12   Valid Values/Format: Numeric
 * @member {String} disputedAmount
 */
CreateClaimRequest.prototype['disputedAmount'] = undefined;

/**
 * Currency of amount disputed in the claim. disputedCurrency can be provided as standard alpha code or numeric code   Length: 3   Valid Values/Format: A-Z (Uppercase Alphabetic Letter) / Numeric
 * @member {String} disputedCurrency
 */
CreateClaimRequest.prototype['disputedCurrency'] = undefined;

/**
 * Type of claim to be created.   Length: 8   Valid Values/Format: Standard
 * @member {module:model/CreateClaimRequest.ClaimTypeEnum} claimType
 */
CreateClaimRequest.prototype['claimType'] = undefined;

/**
 * The Clearing Transaction Identifier from Clearing Summary Results.   Length: N/A   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} clearingTransactionId
 */
CreateClaimRequest.prototype['clearingTransactionId'] = undefined;

/**
 * The Authorization Transaction Identifier from Authorization Summary Results.   Length: N/A   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} authTransactionId
 */
CreateClaimRequest.prototype['authTransactionId'] = undefined;





/**
 * Allowed values for the <code>claimType</code> property.
 * @enum {String}
 * @readonly
 */
CreateClaimRequest['ClaimTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard"
};



export default CreateClaimRequest;

