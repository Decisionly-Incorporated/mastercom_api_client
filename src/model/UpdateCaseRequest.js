/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentStructure from './DocumentStructure';

/**
 * The UpdateCaseRequest model module.
 * @module model/UpdateCaseRequest
 * @version v6
 */
class UpdateCaseRequest {
    /**
     * Constructs a new <code>UpdateCaseRequest</code>.
     * @alias module:model/UpdateCaseRequest
     * @param action {module:model/UpdateCaseRequest.ActionEnum} Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.
     */
    constructor(action) { 
        
        UpdateCaseRequest.initialize(this, action);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action) { 
        obj['action'] = action;
    }

    /**
     * Constructs a <code>UpdateCaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateCaseRequest} obj Optional instance to populate.
     * @return {module:model/UpdateCaseRequest} The populated <code>UpdateCaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateCaseRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('fileAttachment')) {
                obj['fileAttachment'] = DocumentStructure.constructFromObject(data['fileAttachment']);
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('rebuttedAs')) {
                obj['rebuttedAs'] = ApiClient.convertToType(data['rebuttedAs'], 'String');
            }
            if (data.hasOwnProperty('docRetryAs')) {
                obj['docRetryAs'] = ApiClient.convertToType(data['docRetryAs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateCaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateCaseRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateCaseRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `fileAttachment`
        if (data['fileAttachment']) { // data not null
          DocumentStructure.validateJSON(data['fileAttachment']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['rebuttedAs'] && !(typeof data['rebuttedAs'] === 'string' || data['rebuttedAs'] instanceof String)) {
            throw new Error("Expected the field `rebuttedAs` to be a primitive type in the JSON string but got " + data['rebuttedAs']);
        }
        // ensure the json data is a string
        if (data['docRetryAs'] && !(typeof data['docRetryAs'] === 'string' || data['docRetryAs'] instanceof String)) {
            throw new Error("Expected the field `docRetryAs` to be a primitive type in the JSON string but got " + data['docRetryAs']);
        }

        return true;
    }


}

UpdateCaseRequest.RequiredProperties = ["action"];

/**
 * Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.
 * @member {module:model/UpdateCaseRequest.ActionEnum} action
 */
UpdateCaseRequest.prototype['action'] = undefined;

/**
 * @member {module:model/DocumentStructure} fileAttachment
 */
UpdateCaseRequest.prototype['fileAttachment'] = undefined;

/**
 * Memo pertaining to the case.   CONDITIONAL:  This field is mandatory and applicable if the action code is ACCEPT, REJECT, REBUT or DOC_RETRY.   Length: 0-100   Valid Values/Format: Alphanumeric
 * @member {String} memo
 */
UpdateCaseRequest.prototype['memo'] = undefined;

/**
 * Rebutted as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable if the action code is REBUT.   Length: 3   Valid Values/Format: SND,REC
 * @member {module:model/UpdateCaseRequest.RebuttedAsEnum} rebuttedAs
 */
UpdateCaseRequest.prototype['rebuttedAs'] = undefined;

/**
 * Uploading document as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable, if the action code is DOC_RETRY and not applicable for any Actions.   Length: 3   Valid Values/Format: SND,REC
 * @member {module:model/UpdateCaseRequest.DocRetryAsEnum} docRetryAs
 */
UpdateCaseRequest.prototype['docRetryAs'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
UpdateCaseRequest['ActionEnum'] = {

    /**
     * value: "ACCEPT"
     * @const
     */
    "ACCEPT": "ACCEPT",

    /**
     * value: "REJECT"
     * @const
     */
    "REJECT": "REJECT",

    /**
     * value: "REBUT"
     * @const
     */
    "REBUT": "REBUT",

    /**
     * value: "ESCALATE"
     * @const
     */
    "ESCALATE": "ESCALATE",

    /**
     * value: "WITHDRAW"
     * @const
     */
    "WITHDRAW": "WITHDRAW",

    /**
     * value: "DOC_RETRY"
     * @const
     */
    "DOC_RETRY": "DOC_RETRY"
};


/**
 * Allowed values for the <code>rebuttedAs</code> property.
 * @enum {String}
 * @readonly
 */
UpdateCaseRequest['RebuttedAsEnum'] = {

    /**
     * value: "SND"
     * @const
     */
    "SND": "SND",

    /**
     * value: "REC"
     * @const
     */
    "REC": "REC"
};


/**
 * Allowed values for the <code>docRetryAs</code> property.
 * @enum {String}
 * @readonly
 */
UpdateCaseRequest['DocRetryAsEnum'] = {

    /**
     * value: "SND"
     * @const
     */
    "SND": "SND",

    /**
     * value: "REC"
     * @const
     */
    "REC": "REC"
};



export default UpdateCaseRequest;

