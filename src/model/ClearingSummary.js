/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClearingSummary model module.
 * @module model/ClearingSummary
 * @version v6
 */
class ClearingSummary {
    /**
     * Constructs a new <code>ClearingSummary</code>.
     * @alias module:model/ClearingSummary
     */
    constructor() { 
        
        ClearingSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClearingSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClearingSummary} obj Optional instance to populate.
     * @return {module:model/ClearingSummary} The populated <code>ClearingSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClearingSummary();

            if (data.hasOwnProperty('primaryAccountNumber')) {
                obj['primaryAccountNumber'] = ApiClient.convertToType(data['primaryAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('transactionAmountLocal')) {
                obj['transactionAmountLocal'] = ApiClient.convertToType(data['transactionAmountLocal'], 'String');
            }
            if (data.hasOwnProperty('dateAndTimeLocal')) {
                obj['dateAndTimeLocal'] = ApiClient.convertToType(data['dateAndTimeLocal'], 'String');
            }
            if (data.hasOwnProperty('cardDataInputCapability')) {
                obj['cardDataInputCapability'] = ApiClient.convertToType(data['cardDataInputCapability'], 'String');
            }
            if (data.hasOwnProperty('cardholderAuthenticationCapability')) {
                obj['cardholderAuthenticationCapability'] = ApiClient.convertToType(data['cardholderAuthenticationCapability'], 'String');
            }
            if (data.hasOwnProperty('cardPresent')) {
                obj['cardPresent'] = ApiClient.convertToType(data['cardPresent'], 'String');
            }
            if (data.hasOwnProperty('acquirerReferenceNumber')) {
                obj['acquirerReferenceNumber'] = ApiClient.convertToType(data['acquirerReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('cardAcceptorName')) {
                obj['cardAcceptorName'] = ApiClient.convertToType(data['cardAcceptorName'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('installmentPaymentDataBrazil')) {
                obj['installmentPaymentDataBrazil'] = ApiClient.convertToType(data['installmentPaymentDataBrazil'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('settlementIndicator')) {
                obj['settlementIndicator'] = ApiClient.convertToType(data['settlementIndicator'], 'String');
            }
            if (data.hasOwnProperty('messageReversalIndicator')) {
                obj['messageReversalIndicator'] = ApiClient.convertToType(data['messageReversalIndicator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClearingSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClearingSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['primaryAccountNumber'] && !(typeof data['primaryAccountNumber'] === 'string' || data['primaryAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got " + data['primaryAccountNumber']);
        }
        // ensure the json data is a string
        if (data['transactionAmountLocal'] && !(typeof data['transactionAmountLocal'] === 'string' || data['transactionAmountLocal'] instanceof String)) {
            throw new Error("Expected the field `transactionAmountLocal` to be a primitive type in the JSON string but got " + data['transactionAmountLocal']);
        }
        // ensure the json data is a string
        if (data['dateAndTimeLocal'] && !(typeof data['dateAndTimeLocal'] === 'string' || data['dateAndTimeLocal'] instanceof String)) {
            throw new Error("Expected the field `dateAndTimeLocal` to be a primitive type in the JSON string but got " + data['dateAndTimeLocal']);
        }
        // ensure the json data is a string
        if (data['cardDataInputCapability'] && !(typeof data['cardDataInputCapability'] === 'string' || data['cardDataInputCapability'] instanceof String)) {
            throw new Error("Expected the field `cardDataInputCapability` to be a primitive type in the JSON string but got " + data['cardDataInputCapability']);
        }
        // ensure the json data is a string
        if (data['cardholderAuthenticationCapability'] && !(typeof data['cardholderAuthenticationCapability'] === 'string' || data['cardholderAuthenticationCapability'] instanceof String)) {
            throw new Error("Expected the field `cardholderAuthenticationCapability` to be a primitive type in the JSON string but got " + data['cardholderAuthenticationCapability']);
        }
        // ensure the json data is a string
        if (data['cardPresent'] && !(typeof data['cardPresent'] === 'string' || data['cardPresent'] instanceof String)) {
            throw new Error("Expected the field `cardPresent` to be a primitive type in the JSON string but got " + data['cardPresent']);
        }
        // ensure the json data is a string
        if (data['acquirerReferenceNumber'] && !(typeof data['acquirerReferenceNumber'] === 'string' || data['acquirerReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `acquirerReferenceNumber` to be a primitive type in the JSON string but got " + data['acquirerReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['cardAcceptorName'] && !(typeof data['cardAcceptorName'] === 'string' || data['cardAcceptorName'] instanceof String)) {
            throw new Error("Expected the field `cardAcceptorName` to be a primitive type in the JSON string but got " + data['cardAcceptorName']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['installmentPaymentDataBrazil'] && !(typeof data['installmentPaymentDataBrazil'] === 'string' || data['installmentPaymentDataBrazil'] instanceof String)) {
            throw new Error("Expected the field `installmentPaymentDataBrazil` to be a primitive type in the JSON string but got " + data['installmentPaymentDataBrazil']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['settlementIndicator'] && !(typeof data['settlementIndicator'] === 'string' || data['settlementIndicator'] instanceof String)) {
            throw new Error("Expected the field `settlementIndicator` to be a primitive type in the JSON string but got " + data['settlementIndicator']);
        }
        // ensure the json data is a string
        if (data['messageReversalIndicator'] && !(typeof data['messageReversalIndicator'] === 'string' || data['messageReversalIndicator'] instanceof String)) {
            throw new Error("Expected the field `messageReversalIndicator` to be a primitive type in the JSON string but got " + data['messageReversalIndicator']);
        }

        return true;
    }


}



/**
 * Primary Account Number
 * @member {String} primaryAccountNumber
 */
ClearingSummary.prototype['primaryAccountNumber'] = undefined;

/**
 * Transaction amount in local currency
 * @member {String} transactionAmountLocal
 */
ClearingSummary.prototype['transactionAmountLocal'] = undefined;

/**
 * Local date and time of transaction.The seconds in time will always be set to 00
 * @member {String} dateAndTimeLocal
 */
ClearingSummary.prototype['dateAndTimeLocal'] = undefined;

/**
 * Indicates the conditions that exist at the point of service at the time of the transaction
 * @member {String} cardDataInputCapability
 */
ClearingSummary.prototype['cardDataInputCapability'] = undefined;

/**
 * Describes the capability of the terminal device to support/accept authentication data
 * @member {String} cardholderAuthenticationCapability
 */
ClearingSummary.prototype['cardholderAuthenticationCapability'] = undefined;

/**
 * Indicates if the card was present or not
 * @member {String} cardPresent
 */
ClearingSummary.prototype['cardPresent'] = undefined;

/**
 * Acquirer reference number
 * @member {String} acquirerReferenceNumber
 */
ClearingSummary.prototype['acquirerReferenceNumber'] = undefined;

/**
 * Name the card acceptor that defines the point of interaction in both local and interchange environments (excluding ATM and Card-Activated Public Phones)
 * @member {String} cardAcceptorName
 */
ClearingSummary.prototype['cardAcceptorName'] = undefined;

/**
 * Currency code the issuer will be charging the cardholder for repayment
 * @member {String} currencyCode
 */
ClearingSummary.prototype['currencyCode'] = undefined;

/**
 * The field will contain installment payment data for Brazilian intracountry transactions
 * @member {String} installmentPaymentDataBrazil
 */
ClearingSummary.prototype['installmentPaymentDataBrazil'] = undefined;

/**
 * The host's identifier
 * @member {String} transactionId
 */
ClearingSummary.prototype['transactionId'] = undefined;

/**
 * Field to identify GCO and NON-GCO transactions
 * @member {String} settlementIndicator
 */
ClearingSummary.prototype['settlementIndicator'] = undefined;

/**
 * Identifies a message as a reversal of a previous message
 * @member {String} messageReversalIndicator
 */
ClearingSummary.prototype['messageReversalIndicator'] = undefined;






export default ClearingSummary;

