/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrenciesNameValueDetail from './CurrenciesNameValueDetail';
import FeeCountryCodesNameValueDetail from './FeeCountryCodesNameValueDetail';
import FeeMessageTextsNameValueDetail from './FeeMessageTextsNameValueDetail';
import FeeReasonCodesNameValueDetail from './FeeReasonCodesNameValueDetail';

/**
 * The LoadDataForFeeResponse model module.
 * @module model/LoadDataForFeeResponse
 * @version v6
 */
class LoadDataForFeeResponse {
    /**
     * Constructs a new <code>LoadDataForFeeResponse</code>.
     * @alias module:model/LoadDataForFeeResponse
     */
    constructor() { 
        
        LoadDataForFeeResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoadDataForFeeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoadDataForFeeResponse} obj Optional instance to populate.
     * @return {module:model/LoadDataForFeeResponse} The populated <code>LoadDataForFeeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoadDataForFeeResponse();

            if (data.hasOwnProperty('currencies')) {
                obj['currencies'] = ApiClient.convertToType(data['currencies'], [CurrenciesNameValueDetail]);
            }
            if (data.hasOwnProperty('reasonCodes')) {
                obj['reasonCodes'] = ApiClient.convertToType(data['reasonCodes'], [FeeReasonCodesNameValueDetail]);
            }
            if (data.hasOwnProperty('countryCodes')) {
                obj['countryCodes'] = ApiClient.convertToType(data['countryCodes'], [FeeCountryCodesNameValueDetail]);
            }
            if (data.hasOwnProperty('messageTexts')) {
                obj['messageTexts'] = ApiClient.convertToType(data['messageTexts'], [FeeMessageTextsNameValueDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoadDataForFeeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoadDataForFeeResponse</code>.
     */
    static validateJSON(data) {
        if (data['currencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currencies'])) {
                throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
            }
            // validate the optional field `currencies` (array)
            for (const item of data['currencies']) {
                CurrenciesNameValueDetail.validateJSON(item);
            };
        }
        if (data['reasonCodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reasonCodes'])) {
                throw new Error("Expected the field `reasonCodes` to be an array in the JSON data but got " + data['reasonCodes']);
            }
            // validate the optional field `reasonCodes` (array)
            for (const item of data['reasonCodes']) {
                FeeReasonCodesNameValueDetail.validateJSON(item);
            };
        }
        if (data['countryCodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['countryCodes'])) {
                throw new Error("Expected the field `countryCodes` to be an array in the JSON data but got " + data['countryCodes']);
            }
            // validate the optional field `countryCodes` (array)
            for (const item of data['countryCodes']) {
                FeeCountryCodesNameValueDetail.validateJSON(item);
            };
        }
        if (data['messageTexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messageTexts'])) {
                throw new Error("Expected the field `messageTexts` to be an array in the JSON data but got " + data['messageTexts']);
            }
            // validate the optional field `messageTexts` (array)
            for (const item of data['messageTexts']) {
                FeeMessageTextsNameValueDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of valid currencies
 * @member {Array.<module:model/CurrenciesNameValueDetail>} currencies
 */
LoadDataForFeeResponse.prototype['currencies'] = undefined;

/**
 * List of valid reason codes
 * @member {Array.<module:model/FeeReasonCodesNameValueDetail>} reasonCodes
 */
LoadDataForFeeResponse.prototype['reasonCodes'] = undefined;

/**
 * List of valid country codes
 * @member {Array.<module:model/FeeCountryCodesNameValueDetail>} countryCodes
 */
LoadDataForFeeResponse.prototype['countryCodes'] = undefined;

/**
 * List of valid message texts
 * @member {Array.<module:model/FeeMessageTextsNameValueDetail>} messageTexts
 */
LoadDataForFeeResponse.prototype['messageTexts'] = undefined;






export default LoadDataForFeeResponse;

