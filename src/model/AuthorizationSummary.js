/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClearingSummary from './ClearingSummary';

/**
 * The AuthorizationSummary model module.
 * @module model/AuthorizationSummary
 * @version v6
 */
class AuthorizationSummary {
    /**
     * Constructs a new <code>AuthorizationSummary</code>.
     * @alias module:model/AuthorizationSummary
     */
    constructor() { 
        
        AuthorizationSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthorizationSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthorizationSummary} obj Optional instance to populate.
     * @return {module:model/AuthorizationSummary} The populated <code>AuthorizationSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthorizationSummary();

            if (data.hasOwnProperty('originalMessageTypeIdentifier')) {
                obj['originalMessageTypeIdentifier'] = ApiClient.convertToType(data['originalMessageTypeIdentifier'], 'String');
            }
            if (data.hasOwnProperty('banknetDate')) {
                obj['banknetDate'] = ApiClient.convertToType(data['banknetDate'], 'String');
            }
            if (data.hasOwnProperty('transactionAmountUsd')) {
                obj['transactionAmountUsd'] = ApiClient.convertToType(data['transactionAmountUsd'], 'String');
            }
            if (data.hasOwnProperty('primaryAccountNumber')) {
                obj['primaryAccountNumber'] = ApiClient.convertToType(data['primaryAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('processingCode')) {
                obj['processingCode'] = ApiClient.convertToType(data['processingCode'], 'String');
            }
            if (data.hasOwnProperty('transactionAmountLocal')) {
                obj['transactionAmountLocal'] = ApiClient.convertToType(data['transactionAmountLocal'], 'String');
            }
            if (data.hasOwnProperty('authorizationDateAndTime')) {
                obj['authorizationDateAndTime'] = ApiClient.convertToType(data['authorizationDateAndTime'], 'String');
            }
            if (data.hasOwnProperty('authenticationId')) {
                obj['authenticationId'] = ApiClient.convertToType(data['authenticationId'], 'String');
            }
            if (data.hasOwnProperty('cardAcceptorName')) {
                obj['cardAcceptorName'] = ApiClient.convertToType(data['cardAcceptorName'], 'String');
            }
            if (data.hasOwnProperty('cardAcceptorCity')) {
                obj['cardAcceptorCity'] = ApiClient.convertToType(data['cardAcceptorCity'], 'String');
            }
            if (data.hasOwnProperty('cardAcceptorState')) {
                obj['cardAcceptorState'] = ApiClient.convertToType(data['cardAcceptorState'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('chipPresent')) {
                obj['chipPresent'] = ApiClient.convertToType(data['chipPresent'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('track1')) {
                obj['track1'] = ApiClient.convertToType(data['track1'], 'String');
            }
            if (data.hasOwnProperty('track2')) {
                obj['track2'] = ApiClient.convertToType(data['track2'], 'String');
            }
            if (data.hasOwnProperty('clearingSummary')) {
                obj['clearingSummary'] = ApiClient.convertToType(data['clearingSummary'], [ClearingSummary]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthorizationSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthorizationSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['originalMessageTypeIdentifier'] && !(typeof data['originalMessageTypeIdentifier'] === 'string' || data['originalMessageTypeIdentifier'] instanceof String)) {
            throw new Error("Expected the field `originalMessageTypeIdentifier` to be a primitive type in the JSON string but got " + data['originalMessageTypeIdentifier']);
        }
        // ensure the json data is a string
        if (data['banknetDate'] && !(typeof data['banknetDate'] === 'string' || data['banknetDate'] instanceof String)) {
            throw new Error("Expected the field `banknetDate` to be a primitive type in the JSON string but got " + data['banknetDate']);
        }
        // ensure the json data is a string
        if (data['transactionAmountUsd'] && !(typeof data['transactionAmountUsd'] === 'string' || data['transactionAmountUsd'] instanceof String)) {
            throw new Error("Expected the field `transactionAmountUsd` to be a primitive type in the JSON string but got " + data['transactionAmountUsd']);
        }
        // ensure the json data is a string
        if (data['primaryAccountNumber'] && !(typeof data['primaryAccountNumber'] === 'string' || data['primaryAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got " + data['primaryAccountNumber']);
        }
        // ensure the json data is a string
        if (data['processingCode'] && !(typeof data['processingCode'] === 'string' || data['processingCode'] instanceof String)) {
            throw new Error("Expected the field `processingCode` to be a primitive type in the JSON string but got " + data['processingCode']);
        }
        // ensure the json data is a string
        if (data['transactionAmountLocal'] && !(typeof data['transactionAmountLocal'] === 'string' || data['transactionAmountLocal'] instanceof String)) {
            throw new Error("Expected the field `transactionAmountLocal` to be a primitive type in the JSON string but got " + data['transactionAmountLocal']);
        }
        // ensure the json data is a string
        if (data['authorizationDateAndTime'] && !(typeof data['authorizationDateAndTime'] === 'string' || data['authorizationDateAndTime'] instanceof String)) {
            throw new Error("Expected the field `authorizationDateAndTime` to be a primitive type in the JSON string but got " + data['authorizationDateAndTime']);
        }
        // ensure the json data is a string
        if (data['authenticationId'] && !(typeof data['authenticationId'] === 'string' || data['authenticationId'] instanceof String)) {
            throw new Error("Expected the field `authenticationId` to be a primitive type in the JSON string but got " + data['authenticationId']);
        }
        // ensure the json data is a string
        if (data['cardAcceptorName'] && !(typeof data['cardAcceptorName'] === 'string' || data['cardAcceptorName'] instanceof String)) {
            throw new Error("Expected the field `cardAcceptorName` to be a primitive type in the JSON string but got " + data['cardAcceptorName']);
        }
        // ensure the json data is a string
        if (data['cardAcceptorCity'] && !(typeof data['cardAcceptorCity'] === 'string' || data['cardAcceptorCity'] instanceof String)) {
            throw new Error("Expected the field `cardAcceptorCity` to be a primitive type in the JSON string but got " + data['cardAcceptorCity']);
        }
        // ensure the json data is a string
        if (data['cardAcceptorState'] && !(typeof data['cardAcceptorState'] === 'string' || data['cardAcceptorState'] instanceof String)) {
            throw new Error("Expected the field `cardAcceptorState` to be a primitive type in the JSON string but got " + data['cardAcceptorState']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['chipPresent'] && !(typeof data['chipPresent'] === 'string' || data['chipPresent'] instanceof String)) {
            throw new Error("Expected the field `chipPresent` to be a primitive type in the JSON string but got " + data['chipPresent']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['track1'] && !(typeof data['track1'] === 'string' || data['track1'] instanceof String)) {
            throw new Error("Expected the field `track1` to be a primitive type in the JSON string but got " + data['track1']);
        }
        // ensure the json data is a string
        if (data['track2'] && !(typeof data['track2'] === 'string' || data['track2'] instanceof String)) {
            throw new Error("Expected the field `track2` to be a primitive type in the JSON string but got " + data['track2']);
        }
        if (data['clearingSummary']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clearingSummary'])) {
                throw new Error("Expected the field `clearingSummary` to be an array in the JSON data but got " + data['clearingSummary']);
            }
            // validate the optional field `clearingSummary` (array)
            for (const item of data['clearingSummary']) {
                ClearingSummary.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Indicates the Message Type Identifier (MTI) of the original message
 * @member {String} originalMessageTypeIdentifier
 */
AuthorizationSummary.prototype['originalMessageTypeIdentifier'] = undefined;

/**
 * The date/time when the SAFE record is matched to the Authorization transaction
 * @member {String} banknetDate
 */
AuthorizationSummary.prototype['banknetDate'] = undefined;

/**
 * Transaction amount in USD
 * @member {String} transactionAmountUsd
 */
AuthorizationSummary.prototype['transactionAmountUsd'] = undefined;

/**
 * Primary account number
 * @member {String} primaryAccountNumber
 */
AuthorizationSummary.prototype['primaryAccountNumber'] = undefined;

/**
 * A series of digits used to describe the effect of a transaction on the customer account and the type of accounts affected
 * @member {String} processingCode
 */
AuthorizationSummary.prototype['processingCode'] = undefined;

/**
 * Transaction amount in local currency
 * @member {String} transactionAmountLocal
 */
AuthorizationSummary.prototype['transactionAmountLocal'] = undefined;

/**
 * The date and time that a message is entered into the Mastercard Network
 * @member {String} authorizationDateAndTime
 */
AuthorizationSummary.prototype['authorizationDateAndTime'] = undefined;

/**
 * Defined by the Authorization Platform and is passed to the issuer to indicate that the transaction qualified for Authentication service
 * @member {String} authenticationId
 */
AuthorizationSummary.prototype['authenticationId'] = undefined;

/**
 * Name the card acceptor that defines the point of interaction in both local and interchange environments (excluding ATM and Card-Activated Public Phones)
 * @member {String} cardAcceptorName
 */
AuthorizationSummary.prototype['cardAcceptorName'] = undefined;

/**
 * City of the card acceptor that defines the point of interaction in both local and interchange environments (excluding ATM and Card-Activated Public Phones)
 * @member {String} cardAcceptorCity
 */
AuthorizationSummary.prototype['cardAcceptorCity'] = undefined;

/**
 * State of the card acceptor that defines the point of interaction in both local and interchange environments (excluding ATM and Card-Activated Public Phones)
 * @member {String} cardAcceptorState
 */
AuthorizationSummary.prototype['cardAcceptorState'] = undefined;

/**
 * Currency code the issuer will be charging the cardholder for repayment
 * @member {String} currencyCode
 */
AuthorizationSummary.prototype['currencyCode'] = undefined;

/**
 * Indicates if chip was present or not
 * @member {String} chipPresent
 */
AuthorizationSummary.prototype['chipPresent'] = undefined;

/**
 * The host's identifier
 * @member {String} transactionId
 */
AuthorizationSummary.prototype['transactionId'] = undefined;

/**
 * The information encoded on track 1 of the card's magnetic stripe as defined in the ISO 7813 specification, including data element separators but excluding beginning and ending sentinels and LRC characters as defined in this data element definition
 * @member {String} track1
 */
AuthorizationSummary.prototype['track1'] = undefined;

/**
 * The information encoded on track 2 of the card magnetic stripe as defined in the ISO 7813 specification, including data element separators but excluding beginning and ending sentinels and longitudinal redundancy check (LRC) characters as defined therein
 * @member {String} track2
 */
AuthorizationSummary.prototype['track2'] = undefined;

/**
 * @member {Array.<module:model/ClearingSummary>} clearingSummary
 */
AuthorizationSummary.prototype['clearingSummary'] = undefined;






export default AuthorizationSummary;

