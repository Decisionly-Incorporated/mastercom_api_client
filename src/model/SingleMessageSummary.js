/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SingleMessageSummary model module.
 * @module model/SingleMessageSummary
 * @version v6
 */
class SingleMessageSummary {
    /**
     * Constructs a new <code>SingleMessageSummary</code>.
     * @alias module:model/SingleMessageSummary
     */
    constructor() { 
        
        SingleMessageSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SingleMessageSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleMessageSummary} obj Optional instance to populate.
     * @return {module:model/SingleMessageSummary} The populated <code>SingleMessageSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleMessageSummary();

            if (data.hasOwnProperty('acquirerReferenceNumber')) {
                obj['acquirerReferenceNumber'] = ApiClient.convertToType(data['acquirerReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('adviceReasonCode')) {
                obj['adviceReasonCode'] = ApiClient.convertToType(data['adviceReasonCode'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('localCurrencyCode')) {
                obj['localCurrencyCode'] = ApiClient.convertToType(data['localCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('localRequestedAmount')) {
                obj['localRequestedAmount'] = ApiClient.convertToType(data['localRequestedAmount'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('merchantType')) {
                obj['merchantType'] = ApiClient.convertToType(data['merchantType'], 'String');
            }
            if (data.hasOwnProperty('primaryAccountNumber')) {
                obj['primaryAccountNumber'] = ApiClient.convertToType(data['primaryAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('processingCode')) {
                obj['processingCode'] = ApiClient.convertToType(data['processingCode'], 'String');
            }
            if (data.hasOwnProperty('responseCode')) {
                obj['responseCode'] = ApiClient.convertToType(data['responseCode'], 'String');
            }
            if (data.hasOwnProperty('responseSource')) {
                obj['responseSource'] = ApiClient.convertToType(data['responseSource'], 'String');
            }
            if (data.hasOwnProperty('settlementDate')) {
                obj['settlementDate'] = ApiClient.convertToType(data['settlementDate'], 'String');
            }
            if (data.hasOwnProperty('switchSerialNumber')) {
                obj['switchSerialNumber'] = ApiClient.convertToType(data['switchSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('switchDateTime')) {
                obj['switchDateTime'] = ApiClient.convertToType(data['switchDateTime'], 'String');
            }
            if (data.hasOwnProperty('trace')) {
                obj['trace'] = ApiClient.convertToType(data['trace'], 'String');
            }
            if (data.hasOwnProperty('tranType')) {
                obj['tranType'] = ApiClient.convertToType(data['tranType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleMessageSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleMessageSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquirerReferenceNumber'] && !(typeof data['acquirerReferenceNumber'] === 'string' || data['acquirerReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `acquirerReferenceNumber` to be a primitive type in the JSON string but got " + data['acquirerReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['adviceReasonCode'] && !(typeof data['adviceReasonCode'] === 'string' || data['adviceReasonCode'] instanceof String)) {
            throw new Error("Expected the field `adviceReasonCode` to be a primitive type in the JSON string but got " + data['adviceReasonCode']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['localCurrencyCode'] && !(typeof data['localCurrencyCode'] === 'string' || data['localCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `localCurrencyCode` to be a primitive type in the JSON string but got " + data['localCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['localRequestedAmount'] && !(typeof data['localRequestedAmount'] === 'string' || data['localRequestedAmount'] instanceof String)) {
            throw new Error("Expected the field `localRequestedAmount` to be a primitive type in the JSON string but got " + data['localRequestedAmount']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['merchantType'] && !(typeof data['merchantType'] === 'string' || data['merchantType'] instanceof String)) {
            throw new Error("Expected the field `merchantType` to be a primitive type in the JSON string but got " + data['merchantType']);
        }
        // ensure the json data is a string
        if (data['primaryAccountNumber'] && !(typeof data['primaryAccountNumber'] === 'string' || data['primaryAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got " + data['primaryAccountNumber']);
        }
        // ensure the json data is a string
        if (data['processingCode'] && !(typeof data['processingCode'] === 'string' || data['processingCode'] instanceof String)) {
            throw new Error("Expected the field `processingCode` to be a primitive type in the JSON string but got " + data['processingCode']);
        }
        // ensure the json data is a string
        if (data['responseCode'] && !(typeof data['responseCode'] === 'string' || data['responseCode'] instanceof String)) {
            throw new Error("Expected the field `responseCode` to be a primitive type in the JSON string but got " + data['responseCode']);
        }
        // ensure the json data is a string
        if (data['responseSource'] && !(typeof data['responseSource'] === 'string' || data['responseSource'] instanceof String)) {
            throw new Error("Expected the field `responseSource` to be a primitive type in the JSON string but got " + data['responseSource']);
        }
        // ensure the json data is a string
        if (data['settlementDate'] && !(typeof data['settlementDate'] === 'string' || data['settlementDate'] instanceof String)) {
            throw new Error("Expected the field `settlementDate` to be a primitive type in the JSON string but got " + data['settlementDate']);
        }
        // ensure the json data is a string
        if (data['switchSerialNumber'] && !(typeof data['switchSerialNumber'] === 'string' || data['switchSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `switchSerialNumber` to be a primitive type in the JSON string but got " + data['switchSerialNumber']);
        }
        // ensure the json data is a string
        if (data['switchDateTime'] && !(typeof data['switchDateTime'] === 'string' || data['switchDateTime'] instanceof String)) {
            throw new Error("Expected the field `switchDateTime` to be a primitive type in the JSON string but got " + data['switchDateTime']);
        }
        // ensure the json data is a string
        if (data['trace'] && !(typeof data['trace'] === 'string' || data['trace'] instanceof String)) {
            throw new Error("Expected the field `trace` to be a primitive type in the JSON string but got " + data['trace']);
        }
        // ensure the json data is a string
        if (data['tranType'] && !(typeof data['tranType'] === 'string' || data['tranType'] instanceof String)) {
            throw new Error("Expected the field `tranType` to be a primitive type in the JSON string but got " + data['tranType']);
        }

        return true;
    }


}



/**
 * Contains the acquirers reference number.
 * @member {String} acquirerReferenceNumber
 */
SingleMessageSummary.prototype['acquirerReferenceNumber'] = undefined;

/**
 * Used to inform processors an action has been taken on the advice messages. 
 * @member {String} adviceReasonCode
 */
SingleMessageSummary.prototype['adviceReasonCode'] = undefined;

/**
 * The brand of service or program.  Acceptable values...MC - Mastercard, CI - CirrusÂ®, MS - MaestroÂ®, MD - Debit Mastercard Â®card, PL - PlusÂ®, PV(L) - Private Label, VI - VISA
 * @member {String} brand
 */
SingleMessageSummary.prototype['brand'] = undefined;

/**
 * The code defining the currency of the transaction as it was submitted to the Single Message System. The Single Message System uses it to specify the currency used in localRequestedAmount
 * @member {String} localCurrencyCode
 */
SingleMessageSummary.prototype['localCurrencyCode'] = undefined;

/**
 * The amount of funds requested by the cardholder in the local currency of the acquirer or source location of the transaction.
 * @member {String} localRequestedAmount
 */
SingleMessageSummary.prototype['localRequestedAmount'] = undefined;

/**
 * For POS acquirers this is the name of the merchant owning the POS terminal. For ATM acquirers this the ATM owning institution name.
 * @member {String} merchantName
 */
SingleMessageSummary.prototype['merchantName'] = undefined;

/**
 * Card Acceptor Business Code. Identifies the card acceptorâ€™s primary business.
 * @member {String} merchantType
 */
SingleMessageSummary.prototype['merchantType'] = undefined;

/**
 * Series of digits used to identify a customer account or relationship.
 * @member {String} primaryAccountNumber
 */
SingleMessageSummary.prototype['primaryAccountNumber'] = undefined;

/**
 * Series of digits used to describe the effect of a transaction on the customer account and the type of accounts affected.
 * @member {String} processingCode
 */
SingleMessageSummary.prototype['processingCode'] = undefined;

/**
 * This field displays the disposition of a message.
 * @member {String} responseCode
 */
SingleMessageSummary.prototype['responseCode'] = undefined;

/**
 * M = The decline was initiated by the member/issuer, S = The decline was initiated by the Single Message System.
 * @member {String} responseSource
 */
SingleMessageSummary.prototype['responseSource'] = undefined;

/**
 * Date Mastercard uses to group the transactions for reporting and for subsequent settlement: Format: MMDDYY
 * @member {String} settlementDate
 */
SingleMessageSummary.prototype['settlementDate'] = undefined;

/**
 * Describes a unique transaction identification number generated (or assigned) by the Single Message System
 * @member {String} switchSerialNumber
 */
SingleMessageSummary.prototype['switchSerialNumber'] = undefined;

/**
 * Date and time Mastercard routes the transaction to the issuer  (MMDDHHMMSS)
 * @member {String} switchDateTime
 */
SingleMessageSummary.prototype['switchDateTime'] = undefined;

/**
 * Unique identifier assigned to each transaction by the originator of the message
 * @member {String} trace
 */
SingleMessageSummary.prototype['trace'] = undefined;

/**
 * Tran Type
 * @member {String} tranType
 */
SingleMessageSummary.prototype['tranType'] = undefined;






export default SingleMessageSummary;

