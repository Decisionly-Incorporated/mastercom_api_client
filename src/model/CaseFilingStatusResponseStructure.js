/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CaseFilingStatusResponseStructure model module.
 * @module model/CaseFilingStatusResponseStructure
 * @version v6
 */
class CaseFilingStatusResponseStructure {
    /**
     * Constructs a new <code>CaseFilingStatusResponseStructure</code>.
     * @alias module:model/CaseFilingStatusResponseStructure
     */
    constructor() { 
        
        CaseFilingStatusResponseStructure.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CaseFilingStatusResponseStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaseFilingStatusResponseStructure} obj Optional instance to populate.
     * @return {module:model/CaseFilingStatusResponseStructure} The populated <code>CaseFilingStatusResponseStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CaseFilingStatusResponseStructure();

            if (data.hasOwnProperty('caseId')) {
                obj['caseId'] = ApiClient.convertToType(data['caseId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaseFilingStatusResponseStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaseFilingStatusResponseStructure</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caseId'] && !(typeof data['caseId'] === 'string' || data['caseId'] instanceof String)) {
            throw new Error("Expected the field `caseId` to be a primitive type in the JSON string but got " + data['caseId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Case Id
 * @member {String} caseId
 */
CaseFilingStatusResponseStructure.prototype['caseId'] = undefined;

/**
 * Status of case filing images.   If neither party attached documentation, valid responses are in the format \"UNAVAILABLE\".   If either party attached documentation, valid responses are in the format \"Status_Party_processDate_REBUT\".  * Valid values for \"Status\" are COMPLETED, PENDING, FAILED, and UNAVAILABLE.  * Valid values for \"Party\" are SND (sender) and REC (receiver).  * \"processDate\" is formatted MM/DD/YYYY HH:MM:SS AM/PM.  * \"REBUT\" will be suffixed to the status when the case is rebutted.
 * @member {String} status
 */
CaseFilingStatusResponseStructure.prototype['status'] = undefined;






export default CaseFilingStatusResponseStructure;

