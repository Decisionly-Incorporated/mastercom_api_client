/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentStructure from './DocumentStructure';

/**
 * The CreateChargebackSingleRequest model module.
 * @module model/CreateChargebackSingleRequest
 * @version v6
 */
class CreateChargebackSingleRequest {
    /**
     * Constructs a new <code>CreateChargebackSingleRequest</code>.
     * @alias module:model/CreateChargebackSingleRequest
     * @param brand {module:model/CreateChargebackSingleRequest.BrandEnum} The brand of service or program.   Length: 2   Valid Values/Format: MC - Mastercard, CI - CirrusÂ®, MS - MaestroÂ®, MD - Debit Mastercard Â®card, PL - PlusÂ®, PV(L) - Private Label, VI - VISA
     * @param replacementAmount {String} Replacement Amount.  The replacement amount should reflect the final amount of the transaction value that should remain applied to the cardholder balance.   Length: 3-12   Valid Values/Format: Numeric
     * @param reversalReasonCode {String} MDS dispute reason code for creating the dispute item   Length: 1-2   Valid Values/Format: Alphanumeric
     * @param usageCode {module:model/CreateChargebackSingleRequest.UsageCodeEnum} The usage code indicates the type of chargeback record processed.   Length: 1   Valid Values/Format: 1 = first chargeback, 2 = second presentment
     */
    constructor(brand, replacementAmount, reversalReasonCode, usageCode) { 
        
        CreateChargebackSingleRequest.initialize(this, brand, replacementAmount, reversalReasonCode, usageCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brand, replacementAmount, reversalReasonCode, usageCode) { 
        obj['brand'] = brand;
        obj['replacementAmount'] = replacementAmount;
        obj['reversalReasonCode'] = reversalReasonCode;
        obj['usageCode'] = usageCode;
    }

    /**
     * Constructs a <code>CreateChargebackSingleRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateChargebackSingleRequest} obj Optional instance to populate.
     * @return {module:model/CreateChargebackSingleRequest} The populated <code>CreateChargebackSingleRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateChargebackSingleRequest();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('replacementAmount')) {
                obj['replacementAmount'] = ApiClient.convertToType(data['replacementAmount'], 'String');
            }
            if (data.hasOwnProperty('reversalReasonCode')) {
                obj['reversalReasonCode'] = ApiClient.convertToType(data['reversalReasonCode'], 'String');
            }
            if (data.hasOwnProperty('usageCode')) {
                obj['usageCode'] = ApiClient.convertToType(data['usageCode'], 'String');
            }
            if (data.hasOwnProperty('chargebackType')) {
                obj['chargebackType'] = ApiClient.convertToType(data['chargebackType'], 'String');
            }
            if (data.hasOwnProperty('acquirerFirstReferenceNumber')) {
                obj['acquirerFirstReferenceNumber'] = ApiClient.convertToType(data['acquirerFirstReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('additionalInformation')) {
                obj['additionalInformation'] = ApiClient.convertToType(data['additionalInformation'], 'String');
            }
            if (data.hasOwnProperty('adjustmentContactFax')) {
                obj['adjustmentContactFax'] = ApiClient.convertToType(data['adjustmentContactFax'], 'String');
            }
            if (data.hasOwnProperty('adjustmentContactName')) {
                obj['adjustmentContactName'] = ApiClient.convertToType(data['adjustmentContactName'], 'String');
            }
            if (data.hasOwnProperty('adjustmentContactPhone')) {
                obj['adjustmentContactPhone'] = ApiClient.convertToType(data['adjustmentContactPhone'], 'String');
            }
            if (data.hasOwnProperty('controlNumber')) {
                obj['controlNumber'] = ApiClient.convertToType(data['controlNumber'], 'String');
            }
            if (data.hasOwnProperty('dataRecordText')) {
                obj['dataRecordText'] = ApiClient.convertToType(data['dataRecordText'], 'String');
            }
            if (data.hasOwnProperty('documentIndicator')) {
                obj['documentIndicator'] = ApiClient.convertToType(data['documentIndicator'], 'String');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('illegibleItemCd')) {
                obj['illegibleItemCd'] = ApiClient.convertToType(data['illegibleItemCd'], 'String');
            }
            if (data.hasOwnProperty('program')) {
                obj['program'] = ApiClient.convertToType(data['program'], 'String');
            }
            if (data.hasOwnProperty('retrievalRequestDate')) {
                obj['retrievalRequestDate'] = ApiClient.convertToType(data['retrievalRequestDate'], 'String');
            }
            if (data.hasOwnProperty('securityBulletinNumber')) {
                obj['securityBulletinNumber'] = ApiClient.convertToType(data['securityBulletinNumber'], 'String');
            }
            if (data.hasOwnProperty('fileAttachment')) {
                obj['fileAttachment'] = DocumentStructure.constructFromObject(data['fileAttachment']);
            }
            if (data.hasOwnProperty('refundNotReceivedIndicator')) {
                obj['refundNotReceivedIndicator'] = ApiClient.convertToType(data['refundNotReceivedIndicator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateChargebackSingleRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateChargebackSingleRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateChargebackSingleRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['replacementAmount'] && !(typeof data['replacementAmount'] === 'string' || data['replacementAmount'] instanceof String)) {
            throw new Error("Expected the field `replacementAmount` to be a primitive type in the JSON string but got " + data['replacementAmount']);
        }
        // ensure the json data is a string
        if (data['reversalReasonCode'] && !(typeof data['reversalReasonCode'] === 'string' || data['reversalReasonCode'] instanceof String)) {
            throw new Error("Expected the field `reversalReasonCode` to be a primitive type in the JSON string but got " + data['reversalReasonCode']);
        }
        // ensure the json data is a string
        if (data['usageCode'] && !(typeof data['usageCode'] === 'string' || data['usageCode'] instanceof String)) {
            throw new Error("Expected the field `usageCode` to be a primitive type in the JSON string but got " + data['usageCode']);
        }
        // ensure the json data is a string
        if (data['chargebackType'] && !(typeof data['chargebackType'] === 'string' || data['chargebackType'] instanceof String)) {
            throw new Error("Expected the field `chargebackType` to be a primitive type in the JSON string but got " + data['chargebackType']);
        }
        // ensure the json data is a string
        if (data['acquirerFirstReferenceNumber'] && !(typeof data['acquirerFirstReferenceNumber'] === 'string' || data['acquirerFirstReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `acquirerFirstReferenceNumber` to be a primitive type in the JSON string but got " + data['acquirerFirstReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['additionalInformation'] && !(typeof data['additionalInformation'] === 'string' || data['additionalInformation'] instanceof String)) {
            throw new Error("Expected the field `additionalInformation` to be a primitive type in the JSON string but got " + data['additionalInformation']);
        }
        // ensure the json data is a string
        if (data['adjustmentContactFax'] && !(typeof data['adjustmentContactFax'] === 'string' || data['adjustmentContactFax'] instanceof String)) {
            throw new Error("Expected the field `adjustmentContactFax` to be a primitive type in the JSON string but got " + data['adjustmentContactFax']);
        }
        // ensure the json data is a string
        if (data['adjustmentContactName'] && !(typeof data['adjustmentContactName'] === 'string' || data['adjustmentContactName'] instanceof String)) {
            throw new Error("Expected the field `adjustmentContactName` to be a primitive type in the JSON string but got " + data['adjustmentContactName']);
        }
        // ensure the json data is a string
        if (data['adjustmentContactPhone'] && !(typeof data['adjustmentContactPhone'] === 'string' || data['adjustmentContactPhone'] instanceof String)) {
            throw new Error("Expected the field `adjustmentContactPhone` to be a primitive type in the JSON string but got " + data['adjustmentContactPhone']);
        }
        // ensure the json data is a string
        if (data['controlNumber'] && !(typeof data['controlNumber'] === 'string' || data['controlNumber'] instanceof String)) {
            throw new Error("Expected the field `controlNumber` to be a primitive type in the JSON string but got " + data['controlNumber']);
        }
        // ensure the json data is a string
        if (data['dataRecordText'] && !(typeof data['dataRecordText'] === 'string' || data['dataRecordText'] instanceof String)) {
            throw new Error("Expected the field `dataRecordText` to be a primitive type in the JSON string but got " + data['dataRecordText']);
        }
        // ensure the json data is a string
        if (data['documentIndicator'] && !(typeof data['documentIndicator'] === 'string' || data['documentIndicator'] instanceof String)) {
            throw new Error("Expected the field `documentIndicator` to be a primitive type in the JSON string but got " + data['documentIndicator']);
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is a string
        if (data['illegibleItemCd'] && !(typeof data['illegibleItemCd'] === 'string' || data['illegibleItemCd'] instanceof String)) {
            throw new Error("Expected the field `illegibleItemCd` to be a primitive type in the JSON string but got " + data['illegibleItemCd']);
        }
        // ensure the json data is a string
        if (data['program'] && !(typeof data['program'] === 'string' || data['program'] instanceof String)) {
            throw new Error("Expected the field `program` to be a primitive type in the JSON string but got " + data['program']);
        }
        // ensure the json data is a string
        if (data['retrievalRequestDate'] && !(typeof data['retrievalRequestDate'] === 'string' || data['retrievalRequestDate'] instanceof String)) {
            throw new Error("Expected the field `retrievalRequestDate` to be a primitive type in the JSON string but got " + data['retrievalRequestDate']);
        }
        // ensure the json data is a string
        if (data['securityBulletinNumber'] && !(typeof data['securityBulletinNumber'] === 'string' || data['securityBulletinNumber'] instanceof String)) {
            throw new Error("Expected the field `securityBulletinNumber` to be a primitive type in the JSON string but got " + data['securityBulletinNumber']);
        }
        // validate the optional field `fileAttachment`
        if (data['fileAttachment']) { // data not null
          DocumentStructure.validateJSON(data['fileAttachment']);
        }
        // ensure the json data is a string
        if (data['refundNotReceivedIndicator'] && !(typeof data['refundNotReceivedIndicator'] === 'string' || data['refundNotReceivedIndicator'] instanceof String)) {
            throw new Error("Expected the field `refundNotReceivedIndicator` to be a primitive type in the JSON string but got " + data['refundNotReceivedIndicator']);
        }

        return true;
    }


}

CreateChargebackSingleRequest.RequiredProperties = ["brand", "replacementAmount", "reversalReasonCode", "usageCode"];

/**
 * The brand of service or program.   Length: 2   Valid Values/Format: MC - Mastercard, CI - CirrusÂ®, MS - MaestroÂ®, MD - Debit Mastercard Â®card, PL - PlusÂ®, PV(L) - Private Label, VI - VISA
 * @member {module:model/CreateChargebackSingleRequest.BrandEnum} brand
 */
CreateChargebackSingleRequest.prototype['brand'] = undefined;

/**
 * Replacement Amount.  The replacement amount should reflect the final amount of the transaction value that should remain applied to the cardholder balance.   Length: 3-12   Valid Values/Format: Numeric
 * @member {String} replacementAmount
 */
CreateChargebackSingleRequest.prototype['replacementAmount'] = undefined;

/**
 * MDS dispute reason code for creating the dispute item   Length: 1-2   Valid Values/Format: Alphanumeric
 * @member {String} reversalReasonCode
 */
CreateChargebackSingleRequest.prototype['reversalReasonCode'] = undefined;

/**
 * The usage code indicates the type of chargeback record processed.   Length: 1   Valid Values/Format: 1 = first chargeback, 2 = second presentment
 * @member {module:model/CreateChargebackSingleRequest.UsageCodeEnum} usageCode
 */
CreateChargebackSingleRequest.prototype['usageCode'] = undefined;

/**
 * If 0.00 is entered in the Replacement Amount local field, you will be requested to define the Chargeback as Single or Double. Select chargebackType, either Single Chargeback or Double Chargeback. A double chargeback is used to reverse a credit posted as a debit.   Length: 1   Valid Values/Format: S or D
 * @member {module:model/CreateChargebackSingleRequest.ChargebackTypeEnum} chargebackType
 */
CreateChargebackSingleRequest.prototype['chargebackType'] = undefined;

/**
 * CONDITIONAL: Mandatory when brand is MD and reason code is 34 (Duplicate processing). A unique identifier assigned by the acquirer of Debit Mastercard transactions.   Length: 23   Valid Values/Format: Numeric
 * @member {String} acquirerFirstReferenceNumber
 */
CreateChargebackSingleRequest.prototype['acquirerFirstReferenceNumber'] = undefined;

/**
 * Any additional information or note may be entered in this field.   Length: 1-38   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} additionalInformation
 */
CreateChargebackSingleRequest.prototype['additionalInformation'] = undefined;

/**
 * CONDITIONAL: The chargeback contact fax number. Required when brand not MD and reversalReasonCode in one of the following...12, 30, 69, 70, 71, 73, 75, 79, 80, 95, 96, 97, 98.   Length: 1-15   Valid Values/Format: Numeric, Special Char(-)
 * @member {String} adjustmentContactFax
 */
CreateChargebackSingleRequest.prototype['adjustmentContactFax'] = undefined;

/**
 * CONDITIONAL: The chargeback contact name. Required when brand not MD and reversalReasonCode in one of the following...12, 30, 69, 70, 71, 73, 75, 79, 80, 95, 96, 97, 98.   Length: 1-24   Valid Values/Format: Character and Space
 * @member {String} adjustmentContactName
 */
CreateChargebackSingleRequest.prototype['adjustmentContactName'] = undefined;

/**
 * CONDITIONAL: The chargeback contact phone number.  Required when brand not MD and reversalReasonCode in one of the following...12, 30, 69, 70, 71, 73, 75, 79, 80, 95, 96, 97, 98   Length: 1-15   Valid Values/Format: Numeric
 * @member {String} adjustmentContactPhone
 */
CreateChargebackSingleRequest.prototype['adjustmentContactPhone'] = undefined;

/**
 * Control Number.  Used to identify the specific transaction for internal auditing and tracing purposes.   Length: 1-5   Valid Values/Format: Numeric
 * @member {String} controlNumber
 */
CreateChargebackSingleRequest.prototype['controlNumber'] = undefined;

/**
 * Data Record Text.   Length: 2-3   Valid Values/Format: R3,RS7   Note: RS5 (Guarantee No Show) is not supported, customers must use field reversalReasonCode 53 instead
 * @member {module:model/CreateChargebackSingleRequest.DataRecordTextEnum} dataRecordText
 */
CreateChargebackSingleRequest.prototype['dataRecordText'] = undefined;

/**
 * CONDITIONAL: Required when brand is MD and for the following reversalReasonCodes when brand is not MD...70, 71.   Length: 1   Valid Values/Format: 0-No Documentation, 1-Document will follow
 * @member {module:model/CreateChargebackSingleRequest.DocumentIndicatorEnum} documentIndicator
 */
CreateChargebackSingleRequest.prototype['documentIndicator'] = undefined;

/**
 * CONDITIONAL: This field is mandatory when reversalReasonCode is 02.   Length: 1   Valid Values/Format: 1, 2, 4
 * @member {module:model/CreateChargebackSingleRequest.DocumentTypeEnum} documentType
 */
CreateChargebackSingleRequest.prototype['documentType'] = undefined;

/**
 * CONDITIONAL: The supporting documentation was illegible. This field is mandatory when reversalReasonCode is 02.   Length: 1   Valid Values/Format: 1, 2, 3, 4, 5, 6
 * @member {module:model/CreateChargebackSingleRequest.IllegibleItemCdEnum} illegibleItemCd
 */
CreateChargebackSingleRequest.prototype['illegibleItemCd'] = undefined;

/**
 * CONDITIONAL: The type of card program bearing the account number. This field is mandatory when reversalReasonCode is 49.   Length: 4-5   Valid Values/Format: QMAP, GMAP, INVAL.
 * @member {module:model/CreateChargebackSingleRequest.ProgramEnum} program
 */
CreateChargebackSingleRequest.prototype['program'] = undefined;

/**
 * CONDITIONAL: The date of the retrieval request.  This field is mandatory when brand is MD and reversalReasonCode is 02.   Length: 6   Valid Values/Format: Date
 * @member {String} retrievalRequestDate
 */
CreateChargebackSingleRequest.prototype['retrievalRequestDate'] = undefined;

/**
 * OPTIONAL: This is three-digit Global Security Bulletin number using a YMM format (for example, bulletin number 6 June 2008 would be entered as 806).  Mandatory when brand is MD and reason code is 49. YMM is the format.   Length: 3   Valid Values/Format: Numeric
 * @member {String} securityBulletinNumber
 */
CreateChargebackSingleRequest.prototype['securityBulletinNumber'] = undefined;

/**
 * @member {module:model/DocumentStructure} fileAttachment
 */
CreateChargebackSingleRequest.prototype['fileAttachment'] = undefined;

/**
 * Cardholder/Issuer did not receive refund when a first chargeback was rejected by Collaboration with reason code 5000 indicating refund provided. 20 days after rejection of CB through collaboration.   CONDITIONAL: this field is only applicable if chargebackType is CHARGEBACK.   Length: 4-5   Valid Values/Format: true, false
 * @member {String} refundNotReceivedIndicator
 */
CreateChargebackSingleRequest.prototype['refundNotReceivedIndicator'] = undefined;





/**
 * Allowed values for the <code>brand</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['BrandEnum'] = {

    /**
     * value: "MC"
     * @const
     */
    "MC": "MC",

    /**
     * value: "CI"
     * @const
     */
    "CI": "CI",

    /**
     * value: "MS"
     * @const
     */
    "MS": "MS",

    /**
     * value: "MD"
     * @const
     */
    "MD": "MD",

    /**
     * value: "PL"
     * @const
     */
    "PL": "PL",

    /**
     * value: "PV"
     * @const
     */
    "PV": "PV",

    /**
     * value: "VI"
     * @const
     */
    "VI": "VI"
};


/**
 * Allowed values for the <code>usageCode</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['UsageCodeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2"
};


/**
 * Allowed values for the <code>chargebackType</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['ChargebackTypeEnum'] = {

    /**
     * value: "S"
     * @const
     */
    "S": "S",

    /**
     * value: "D"
     * @const
     */
    "D": "D"
};


/**
 * Allowed values for the <code>dataRecordText</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['DataRecordTextEnum'] = {

    /**
     * value: "R3"
     * @const
     */
    "R3": "R3",

    /**
     * value: "RS7"
     * @const
     */
    "RS7": "RS7"
};


/**
 * Allowed values for the <code>documentIndicator</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['DocumentIndicatorEnum'] = {

    /**
     * value: "0"
     * @const
     */
    "0": "0",

    /**
     * value: "1"
     * @const
     */
    "1": "1"
};


/**
 * Allowed values for the <code>documentType</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['DocumentTypeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "4"
     * @const
     */
    "4": "4"
};


/**
 * Allowed values for the <code>illegibleItemCd</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['IllegibleItemCdEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6"
};


/**
 * Allowed values for the <code>program</code> property.
 * @enum {String}
 * @readonly
 */
CreateChargebackSingleRequest['ProgramEnum'] = {

    /**
     * value: "QMAP"
     * @const
     */
    "QMAP": "QMAP",

    /**
     * value: "GMAP"
     * @const
     */
    "GMAP": "GMAP",

    /**
     * value: "INVAL"
     * @const
     */
    "INVAL": "INVAL"
};



export default CreateChargebackSingleRequest;

