/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaseFilingLifeCycle from './CaseFilingLifeCycle';
import ChargebackDetails from './ChargebackDetails';
import FeeDetails from './FeeDetails';
import RetrievalSummary from './RetrievalSummary';

/**
 * The ClaimDetail model module.
 * @module model/ClaimDetail
 * @version v6
 */
class ClaimDetail {
    /**
     * Constructs a new <code>ClaimDetail</code>.
     * @alias module:model/ClaimDetail
     */
    constructor() { 
        
        ClaimDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClaimDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClaimDetail} obj Optional instance to populate.
     * @return {module:model/ClaimDetail} The populated <code>ClaimDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClaimDetail();

            if (data.hasOwnProperty('acquirerId')) {
                obj['acquirerId'] = ApiClient.convertToType(data['acquirerId'], 'String');
            }
            if (data.hasOwnProperty('acquirerRefNum')) {
                obj['acquirerRefNum'] = ApiClient.convertToType(data['acquirerRefNum'], 'String');
            }
            if (data.hasOwnProperty('primaryAccountNum')) {
                obj['primaryAccountNum'] = ApiClient.convertToType(data['primaryAccountNum'], 'String');
            }
            if (data.hasOwnProperty('claimId')) {
                obj['claimId'] = ApiClient.convertToType(data['claimId'], 'String');
            }
            if (data.hasOwnProperty('claimType')) {
                obj['claimType'] = ApiClient.convertToType(data['claimType'], 'String');
            }
            if (data.hasOwnProperty('claimValue')) {
                obj['claimValue'] = ApiClient.convertToType(data['claimValue'], 'String');
            }
            if (data.hasOwnProperty('standardClaims')) {
                obj['standardClaims'] = ApiClient.convertToType(data['standardClaims'], 'String');
            }
            if (data.hasOwnProperty('clearingDueDate')) {
                obj['clearingDueDate'] = ApiClient.convertToType(data['clearingDueDate'], 'String');
            }
            if (data.hasOwnProperty('clearingNetwork')) {
                obj['clearingNetwork'] = ApiClient.convertToType(data['clearingNetwork'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('isAccurate')) {
                obj['isAccurate'] = ApiClient.convertToType(data['isAccurate'], 'String');
            }
            if (data.hasOwnProperty('isAcquirer')) {
                obj['isAcquirer'] = ApiClient.convertToType(data['isAcquirer'], 'String');
            }
            if (data.hasOwnProperty('isIssuer')) {
                obj['isIssuer'] = ApiClient.convertToType(data['isIssuer'], 'String');
            }
            if (data.hasOwnProperty('isOpen')) {
                obj['isOpen'] = ApiClient.convertToType(data['isOpen'], 'String');
            }
            if (data.hasOwnProperty('issuerId')) {
                obj['issuerId'] = ApiClient.convertToType(data['issuerId'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedDate')) {
                obj['lastModifiedDate'] = ApiClient.convertToType(data['lastModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('queueName')) {
                obj['queueName'] = ApiClient.convertToType(data['queueName'], 'String');
            }
            if (data.hasOwnProperty('switchSerialNumber')) {
                obj['switchSerialNumber'] = ApiClient.convertToType(data['switchSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('caseFilingDetails')) {
                obj['caseFilingDetails'] = CaseFilingLifeCycle.constructFromObject(data['caseFilingDetails']);
            }
            if (data.hasOwnProperty('retrievalDetails')) {
                obj['retrievalDetails'] = RetrievalSummary.constructFromObject(data['retrievalDetails']);
            }
            if (data.hasOwnProperty('chargebackDetails')) {
                obj['chargebackDetails'] = ApiClient.convertToType(data['chargebackDetails'], [ChargebackDetails]);
            }
            if (data.hasOwnProperty('feeDetails')) {
                obj['feeDetails'] = ApiClient.convertToType(data['feeDetails'], [FeeDetails]);
            }
            if (data.hasOwnProperty('retrievalDetailsList')) {
                obj['retrievalDetailsList'] = ApiClient.convertToType(data['retrievalDetailsList'], [RetrievalSummary]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClaimDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClaimDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquirerId'] && !(typeof data['acquirerId'] === 'string' || data['acquirerId'] instanceof String)) {
            throw new Error("Expected the field `acquirerId` to be a primitive type in the JSON string but got " + data['acquirerId']);
        }
        // ensure the json data is a string
        if (data['acquirerRefNum'] && !(typeof data['acquirerRefNum'] === 'string' || data['acquirerRefNum'] instanceof String)) {
            throw new Error("Expected the field `acquirerRefNum` to be a primitive type in the JSON string but got " + data['acquirerRefNum']);
        }
        // ensure the json data is a string
        if (data['primaryAccountNum'] && !(typeof data['primaryAccountNum'] === 'string' || data['primaryAccountNum'] instanceof String)) {
            throw new Error("Expected the field `primaryAccountNum` to be a primitive type in the JSON string but got " + data['primaryAccountNum']);
        }
        // ensure the json data is a string
        if (data['claimId'] && !(typeof data['claimId'] === 'string' || data['claimId'] instanceof String)) {
            throw new Error("Expected the field `claimId` to be a primitive type in the JSON string but got " + data['claimId']);
        }
        // ensure the json data is a string
        if (data['claimType'] && !(typeof data['claimType'] === 'string' || data['claimType'] instanceof String)) {
            throw new Error("Expected the field `claimType` to be a primitive type in the JSON string but got " + data['claimType']);
        }
        // ensure the json data is a string
        if (data['claimValue'] && !(typeof data['claimValue'] === 'string' || data['claimValue'] instanceof String)) {
            throw new Error("Expected the field `claimValue` to be a primitive type in the JSON string but got " + data['claimValue']);
        }
        // ensure the json data is a string
        if (data['standardClaims'] && !(typeof data['standardClaims'] === 'string' || data['standardClaims'] instanceof String)) {
            throw new Error("Expected the field `standardClaims` to be a primitive type in the JSON string but got " + data['standardClaims']);
        }
        // ensure the json data is a string
        if (data['clearingDueDate'] && !(typeof data['clearingDueDate'] === 'string' || data['clearingDueDate'] instanceof String)) {
            throw new Error("Expected the field `clearingDueDate` to be a primitive type in the JSON string but got " + data['clearingDueDate']);
        }
        // ensure the json data is a string
        if (data['clearingNetwork'] && !(typeof data['clearingNetwork'] === 'string' || data['clearingNetwork'] instanceof String)) {
            throw new Error("Expected the field `clearingNetwork` to be a primitive type in the JSON string but got " + data['clearingNetwork']);
        }
        // ensure the json data is a string
        if (data['createDate'] && !(typeof data['createDate'] === 'string' || data['createDate'] instanceof String)) {
            throw new Error("Expected the field `createDate` to be a primitive type in the JSON string but got " + data['createDate']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['isAccurate'] && !(typeof data['isAccurate'] === 'string' || data['isAccurate'] instanceof String)) {
            throw new Error("Expected the field `isAccurate` to be a primitive type in the JSON string but got " + data['isAccurate']);
        }
        // ensure the json data is a string
        if (data['isAcquirer'] && !(typeof data['isAcquirer'] === 'string' || data['isAcquirer'] instanceof String)) {
            throw new Error("Expected the field `isAcquirer` to be a primitive type in the JSON string but got " + data['isAcquirer']);
        }
        // ensure the json data is a string
        if (data['isIssuer'] && !(typeof data['isIssuer'] === 'string' || data['isIssuer'] instanceof String)) {
            throw new Error("Expected the field `isIssuer` to be a primitive type in the JSON string but got " + data['isIssuer']);
        }
        // ensure the json data is a string
        if (data['isOpen'] && !(typeof data['isOpen'] === 'string' || data['isOpen'] instanceof String)) {
            throw new Error("Expected the field `isOpen` to be a primitive type in the JSON string but got " + data['isOpen']);
        }
        // ensure the json data is a string
        if (data['issuerId'] && !(typeof data['issuerId'] === 'string' || data['issuerId'] instanceof String)) {
            throw new Error("Expected the field `issuerId` to be a primitive type in the JSON string but got " + data['issuerId']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }
        // ensure the json data is a string
        if (data['lastModifiedDate'] && !(typeof data['lastModifiedDate'] === 'string' || data['lastModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got " + data['lastModifiedDate']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['queueName'] && !(typeof data['queueName'] === 'string' || data['queueName'] instanceof String)) {
            throw new Error("Expected the field `queueName` to be a primitive type in the JSON string but got " + data['queueName']);
        }
        // ensure the json data is a string
        if (data['switchSerialNumber'] && !(typeof data['switchSerialNumber'] === 'string' || data['switchSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `switchSerialNumber` to be a primitive type in the JSON string but got " + data['switchSerialNumber']);
        }
        // validate the optional field `caseFilingDetails`
        if (data['caseFilingDetails']) { // data not null
          CaseFilingLifeCycle.validateJSON(data['caseFilingDetails']);
        }
        // validate the optional field `retrievalDetails`
        if (data['retrievalDetails']) { // data not null
          RetrievalSummary.validateJSON(data['retrievalDetails']);
        }
        if (data['chargebackDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['chargebackDetails'])) {
                throw new Error("Expected the field `chargebackDetails` to be an array in the JSON data but got " + data['chargebackDetails']);
            }
            // validate the optional field `chargebackDetails` (array)
            for (const item of data['chargebackDetails']) {
                ChargebackDetails.validateJSON(item);
            };
        }
        if (data['feeDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['feeDetails'])) {
                throw new Error("Expected the field `feeDetails` to be an array in the JSON data but got " + data['feeDetails']);
            }
            // validate the optional field `feeDetails` (array)
            for (const item of data['feeDetails']) {
                FeeDetails.validateJSON(item);
            };
        }
        if (data['retrievalDetailsList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['retrievalDetailsList'])) {
                throw new Error("Expected the field `retrievalDetailsList` to be an array in the JSON data but got " + data['retrievalDetailsList']);
            }
            // validate the optional field `retrievalDetailsList` (array)
            for (const item of data['retrievalDetailsList']) {
                RetrievalSummary.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Acquirer Inst Id
 * @member {String} acquirerId
 */
ClaimDetail.prototype['acquirerId'] = undefined;

/**
 * Acquirer Reference Number
 * @member {String} acquirerRefNum
 */
ClaimDetail.prototype['acquirerRefNum'] = undefined;

/**
 * Card Number for which the Claim is opened
 * @member {String} primaryAccountNum
 */
ClaimDetail.prototype['primaryAccountNum'] = undefined;

/**
 * Claim Id
 * @member {String} claimId
 */
ClaimDetail.prototype['claimId'] = undefined;

/**
 * Claim Type
 * @member {String} claimType
 */
ClaimDetail.prototype['claimType'] = undefined;

/**
 * The value of the claim
 * @member {String} claimValue
 */
ClaimDetail.prototype['claimValue'] = undefined;

/**
 * Contain all Standard Claim Ids associated with the claimType of CaseFiling.  This field will contain a comma delimited list.
 * @member {String} standardClaims
 */
ClaimDetail.prototype['standardClaims'] = undefined;

/**
 * The clearing due date of the claim
 * @member {String} clearingDueDate
 */
ClaimDetail.prototype['clearingDueDate'] = undefined;

/**
 * Clearing Network
 * @member {String} clearingNetwork
 */
ClaimDetail.prototype['clearingNetwork'] = undefined;

/**
 * This is the date of the Claim creation
 * @member {String} createDate
 */
ClaimDetail.prototype['createDate'] = undefined;

/**
 * The due date of the claim
 * @member {String} dueDate
 */
ClaimDetail.prototype['dueDate'] = undefined;

/**
 * An alphanumeric identifier that ties the clearingTransactionId and authTransactionId to the Claim. The format is TI:<ClearingSummary.transactionId>#<AuthorizationSummary.transactionId>
 * @member {String} transactionId
 */
ClaimDetail.prototype['transactionId'] = undefined;

/**
 * True if the claim value is accurate
 * @member {String} isAccurate
 */
ClaimDetail.prototype['isAccurate'] = undefined;

/**
 * True if the claim is acquirer
 * @member {String} isAcquirer
 */
ClaimDetail.prototype['isAcquirer'] = undefined;

/**
 * True if the claim is issuer
 * @member {String} isIssuer
 */
ClaimDetail.prototype['isIssuer'] = undefined;

/**
 * True if the claim is open
 * @member {String} isOpen
 */
ClaimDetail.prototype['isOpen'] = undefined;

/**
 * The issuer institution identifier
 * @member {String} issuerId
 */
ClaimDetail.prototype['issuerId'] = undefined;

/**
 * User who signed this event
 * @member {String} lastModifiedBy
 */
ClaimDetail.prototype['lastModifiedBy'] = undefined;

/**
 * The date of the last claim modification
 * @member {String} lastModifiedDate
 */
ClaimDetail.prototype['lastModifiedDate'] = undefined;

/**
 * Returns the related merchant identifier
 * @member {String} merchantId
 */
ClaimDetail.prototype['merchantId'] = undefined;

/**
 * The queue name to which the claim has been allocated
 * @member {String} queueName
 */
ClaimDetail.prototype['queueName'] = undefined;

/**
 * The Switch Serial Number is a unique transaction identification number generated (or assigned) by the Single Message System
 * @member {String} switchSerialNumber
 */
ClaimDetail.prototype['switchSerialNumber'] = undefined;

/**
 * @member {module:model/CaseFilingLifeCycle} caseFilingDetails
 */
ClaimDetail.prototype['caseFilingDetails'] = undefined;

/**
 * @member {module:model/RetrievalSummary} retrievalDetails
 */
ClaimDetail.prototype['retrievalDetails'] = undefined;

/**
 * @member {Array.<module:model/ChargebackDetails>} chargebackDetails
 */
ClaimDetail.prototype['chargebackDetails'] = undefined;

/**
 * @member {Array.<module:model/FeeDetails>} feeDetails
 */
ClaimDetail.prototype['feeDetails'] = undefined;

/**
 * @member {Array.<module:model/RetrievalSummary>} retrievalDetailsList
 */
ClaimDetail.prototype['retrievalDetailsList'] = undefined;






export default ClaimDetail;

