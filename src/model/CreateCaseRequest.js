/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaseFilingEbdfStructure from './CaseFilingEbdfStructure';
import DocumentStructure from './DocumentStructure';

/**
 * The CreateCaseRequest model module.
 * @module model/CreateCaseRequest
 * @version v6
 */
class CreateCaseRequest {
    /**
     * Constructs a new <code>CreateCaseRequest</code>.
     * @alias module:model/CreateCaseRequest
     * @param caseType {module:model/CreateCaseRequest.CaseTypeEnum} Type of Case Filing.   Length: 1   Valid Values/Format: 1-Pre-arbitration, 2-Arbitration, 3-Pre-compliance, 4-Compliance
     * @param disputeAmount {String} Dispute amount. The currency will be determined by the ICA region entered in the Filed ICA and Filed Against ICA.   Length: 1-10 (Integer Part). 2 (Decimal Part)   Valid Values/Format: Decimal
     * @param currencyCode {String} The case currency. Value should be standard alpha currency code.   For domestic transactions: domestic currency or USD   For cross-border transactions: USD or EUR, per Global Clearing Management System rules   Length: 3   Valid values/format: USD, EUR, GBP, MXN etc and A-Z (uppercase alphabetic letter)  
     * @param filedAgainstIca {String} Filed Against ICA.   Length: 1-11   Valid Values/Format: Numeric
     * @param filingAs {module:model/CreateCaseRequest.FilingAsEnum} Filing case as Issuer or Acquirer.   Length: 1   Valid Values/Format: I, A
     * @param filingIca {String} Filing ICA.   Length: 1-11   Valid Values/Format: Numeric
     * @param memo {String} Enter a Memo pertaining to the case.   Length: 1-13000   Valid Values/Format: Alphanumeric and Special Characters (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
     */
    constructor(caseType, disputeAmount, currencyCode, filedAgainstIca, filingAs, filingIca, memo) { 
        
        CreateCaseRequest.initialize(this, caseType, disputeAmount, currencyCode, filedAgainstIca, filingAs, filingIca, memo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, caseType, disputeAmount, currencyCode, filedAgainstIca, filingAs, filingIca, memo) { 
        obj['caseType'] = caseType;
        obj['disputeAmount'] = disputeAmount;
        obj['currencyCode'] = currencyCode;
        obj['filedAgainstIca'] = filedAgainstIca;
        obj['filingAs'] = filingAs;
        obj['filingIca'] = filingIca;
        obj['memo'] = memo;
    }

    /**
     * Constructs a <code>CreateCaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCaseRequest} obj Optional instance to populate.
     * @return {module:model/CreateCaseRequest} The populated <code>CreateCaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCaseRequest();

            if (data.hasOwnProperty('caseType')) {
                obj['caseType'] = ApiClient.convertToType(data['caseType'], 'String');
            }
            if (data.hasOwnProperty('chargebackRefNum')) {
                obj['chargebackRefNum'] = ApiClient.convertToType(data['chargebackRefNum'], ['String']);
            }
            if (data.hasOwnProperty('customerFilingNumber')) {
                obj['customerFilingNumber'] = ApiClient.convertToType(data['customerFilingNumber'], 'String');
            }
            if (data.hasOwnProperty('disputeAmount')) {
                obj['disputeAmount'] = ApiClient.convertToType(data['disputeAmount'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('fileAttachment')) {
                obj['fileAttachment'] = DocumentStructure.constructFromObject(data['fileAttachment']);
            }
            if (data.hasOwnProperty('filedAgainstIca')) {
                obj['filedAgainstIca'] = ApiClient.convertToType(data['filedAgainstIca'], 'String');
            }
            if (data.hasOwnProperty('filingAs')) {
                obj['filingAs'] = ApiClient.convertToType(data['filingAs'], 'String');
            }
            if (data.hasOwnProperty('filingIca')) {
                obj['filingIca'] = ApiClient.convertToType(data['filingIca'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('messageText')) {
                obj['messageText'] = ApiClient.convertToType(data['messageText'], 'String');
            }
            if (data.hasOwnProperty('changeReasonCodeFlag')) {
                obj['changeReasonCodeFlag'] = ApiClient.convertToType(data['changeReasonCodeFlag'], 'String');
            }
            if (data.hasOwnProperty('updatedChargebackReasonCode')) {
                obj['updatedChargebackReasonCode'] = ApiClient.convertToType(data['updatedChargebackReasonCode'], 'String');
            }
            if (data.hasOwnProperty('changeReasonCodeReason')) {
                obj['changeReasonCodeReason'] = ApiClient.convertToType(data['changeReasonCodeReason'], 'String');
            }
            if (data.hasOwnProperty('primaryAccountNum')) {
                obj['primaryAccountNum'] = ApiClient.convertToType(data['primaryAccountNum'], 'String');
            }
            if (data.hasOwnProperty('acquirerRefNum')) {
                obj['acquirerRefNum'] = ApiClient.convertToType(data['acquirerRefNum'], 'String');
            }
            if (data.hasOwnProperty('chargebackReasonCode')) {
                obj['chargebackReasonCode'] = ApiClient.convertToType(data['chargebackReasonCode'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('violationCode')) {
                obj['violationCode'] = ApiClient.convertToType(data['violationCode'], 'String');
            }
            if (data.hasOwnProperty('violationDate')) {
                obj['violationDate'] = ApiClient.convertToType(data['violationDate'], 'String');
            }
            if (data.hasOwnProperty('chargebackDate')) {
                obj['chargebackDate'] = ApiClient.convertToType(data['chargebackDate'], 'String');
            }
            if (data.hasOwnProperty('creditDate')) {
                obj['creditDate'] = ApiClient.convertToType(data['creditDate'], 'String');
            }
            if (data.hasOwnProperty('caseFilingEbdfDocuments')) {
                obj['caseFilingEbdfDocuments'] = CaseFilingEbdfStructure.constructFromObject(data['caseFilingEbdfDocuments']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCaseRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCaseRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caseType'] && !(typeof data['caseType'] === 'string' || data['caseType'] instanceof String)) {
            throw new Error("Expected the field `caseType` to be a primitive type in the JSON string but got " + data['caseType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['chargebackRefNum'])) {
            throw new Error("Expected the field `chargebackRefNum` to be an array in the JSON data but got " + data['chargebackRefNum']);
        }
        // ensure the json data is a string
        if (data['customerFilingNumber'] && !(typeof data['customerFilingNumber'] === 'string' || data['customerFilingNumber'] instanceof String)) {
            throw new Error("Expected the field `customerFilingNumber` to be a primitive type in the JSON string but got " + data['customerFilingNumber']);
        }
        // ensure the json data is a string
        if (data['disputeAmount'] && !(typeof data['disputeAmount'] === 'string' || data['disputeAmount'] instanceof String)) {
            throw new Error("Expected the field `disputeAmount` to be a primitive type in the JSON string but got " + data['disputeAmount']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // validate the optional field `fileAttachment`
        if (data['fileAttachment']) { // data not null
          DocumentStructure.validateJSON(data['fileAttachment']);
        }
        // ensure the json data is a string
        if (data['filedAgainstIca'] && !(typeof data['filedAgainstIca'] === 'string' || data['filedAgainstIca'] instanceof String)) {
            throw new Error("Expected the field `filedAgainstIca` to be a primitive type in the JSON string but got " + data['filedAgainstIca']);
        }
        // ensure the json data is a string
        if (data['filingAs'] && !(typeof data['filingAs'] === 'string' || data['filingAs'] instanceof String)) {
            throw new Error("Expected the field `filingAs` to be a primitive type in the JSON string but got " + data['filingAs']);
        }
        // ensure the json data is a string
        if (data['filingIca'] && !(typeof data['filingIca'] === 'string' || data['filingIca'] instanceof String)) {
            throw new Error("Expected the field `filingIca` to be a primitive type in the JSON string but got " + data['filingIca']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['messageText'] && !(typeof data['messageText'] === 'string' || data['messageText'] instanceof String)) {
            throw new Error("Expected the field `messageText` to be a primitive type in the JSON string but got " + data['messageText']);
        }
        // ensure the json data is a string
        if (data['changeReasonCodeFlag'] && !(typeof data['changeReasonCodeFlag'] === 'string' || data['changeReasonCodeFlag'] instanceof String)) {
            throw new Error("Expected the field `changeReasonCodeFlag` to be a primitive type in the JSON string but got " + data['changeReasonCodeFlag']);
        }
        // ensure the json data is a string
        if (data['updatedChargebackReasonCode'] && !(typeof data['updatedChargebackReasonCode'] === 'string' || data['updatedChargebackReasonCode'] instanceof String)) {
            throw new Error("Expected the field `updatedChargebackReasonCode` to be a primitive type in the JSON string but got " + data['updatedChargebackReasonCode']);
        }
        // ensure the json data is a string
        if (data['changeReasonCodeReason'] && !(typeof data['changeReasonCodeReason'] === 'string' || data['changeReasonCodeReason'] instanceof String)) {
            throw new Error("Expected the field `changeReasonCodeReason` to be a primitive type in the JSON string but got " + data['changeReasonCodeReason']);
        }
        // ensure the json data is a string
        if (data['primaryAccountNum'] && !(typeof data['primaryAccountNum'] === 'string' || data['primaryAccountNum'] instanceof String)) {
            throw new Error("Expected the field `primaryAccountNum` to be a primitive type in the JSON string but got " + data['primaryAccountNum']);
        }
        // ensure the json data is a string
        if (data['acquirerRefNum'] && !(typeof data['acquirerRefNum'] === 'string' || data['acquirerRefNum'] instanceof String)) {
            throw new Error("Expected the field `acquirerRefNum` to be a primitive type in the JSON string but got " + data['acquirerRefNum']);
        }
        // ensure the json data is a string
        if (data['chargebackReasonCode'] && !(typeof data['chargebackReasonCode'] === 'string' || data['chargebackReasonCode'] instanceof String)) {
            throw new Error("Expected the field `chargebackReasonCode` to be a primitive type in the JSON string but got " + data['chargebackReasonCode']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['violationCode'] && !(typeof data['violationCode'] === 'string' || data['violationCode'] instanceof String)) {
            throw new Error("Expected the field `violationCode` to be a primitive type in the JSON string but got " + data['violationCode']);
        }
        // ensure the json data is a string
        if (data['violationDate'] && !(typeof data['violationDate'] === 'string' || data['violationDate'] instanceof String)) {
            throw new Error("Expected the field `violationDate` to be a primitive type in the JSON string but got " + data['violationDate']);
        }
        // ensure the json data is a string
        if (data['chargebackDate'] && !(typeof data['chargebackDate'] === 'string' || data['chargebackDate'] instanceof String)) {
            throw new Error("Expected the field `chargebackDate` to be a primitive type in the JSON string but got " + data['chargebackDate']);
        }
        // ensure the json data is a string
        if (data['creditDate'] && !(typeof data['creditDate'] === 'string' || data['creditDate'] instanceof String)) {
            throw new Error("Expected the field `creditDate` to be a primitive type in the JSON string but got " + data['creditDate']);
        }
        // validate the optional field `caseFilingEbdfDocuments`
        if (data['caseFilingEbdfDocuments']) { // data not null
          CaseFilingEbdfStructure.validateJSON(data['caseFilingEbdfDocuments']);
        }

        return true;
    }


}

CreateCaseRequest.RequiredProperties = ["caseType", "disputeAmount", "currencyCode", "filedAgainstIca", "filingAs", "filingIca", "memo"];

/**
 * Type of Case Filing.   Length: 1   Valid Values/Format: 1-Pre-arbitration, 2-Arbitration, 3-Pre-compliance, 4-Compliance
 * @member {module:model/CreateCaseRequest.CaseTypeEnum} caseType
 */
CreateCaseRequest.prototype['caseType'] = undefined;

/**
 * A list of Chargeback Reference numbers.   CONDITIONAL: This field is mandatory and applicable if the case type is pre-arbitration or arbitration or if the primary account number field is not populated.   Pre-Arbitration and Arbitration case will have one chargeback to one case filing. Pre-Compliance and Compliance case can have many chargeback to one case filing.   Length: 0-10   Valid Values/Format: Numeric
 * @member {Array.<String>} chargebackRefNum
 */
CreateCaseRequest.prototype['chargebackRefNum'] = undefined;

/**
 * Customer filing number which is the filing party's internal number.   Length: 0-15   Valid Values/Format: Numeric
 * @member {String} customerFilingNumber
 */
CreateCaseRequest.prototype['customerFilingNumber'] = undefined;

/**
 * Dispute amount. The currency will be determined by the ICA region entered in the Filed ICA and Filed Against ICA.   Length: 1-10 (Integer Part). 2 (Decimal Part)   Valid Values/Format: Decimal
 * @member {String} disputeAmount
 */
CreateCaseRequest.prototype['disputeAmount'] = undefined;

/**
 * The case currency. Value should be standard alpha currency code.   For domestic transactions: domestic currency or USD   For cross-border transactions: USD or EUR, per Global Clearing Management System rules   Length: 3   Valid values/format: USD, EUR, GBP, MXN etc and A-Z (uppercase alphabetic letter)  
 * @member {String} currencyCode
 */
CreateCaseRequest.prototype['currencyCode'] = undefined;

/**
 * Due date when the response is required.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
 * @member {String} dueDate
 */
CreateCaseRequest.prototype['dueDate'] = undefined;

/**
 * @member {module:model/DocumentStructure} fileAttachment
 */
CreateCaseRequest.prototype['fileAttachment'] = undefined;

/**
 * Filed Against ICA.   Length: 1-11   Valid Values/Format: Numeric
 * @member {String} filedAgainstIca
 */
CreateCaseRequest.prototype['filedAgainstIca'] = undefined;

/**
 * Filing case as Issuer or Acquirer.   Length: 1   Valid Values/Format: I, A
 * @member {module:model/CreateCaseRequest.FilingAsEnum} filingAs
 */
CreateCaseRequest.prototype['filingAs'] = undefined;

/**
 * Filing ICA.   Length: 1-11   Valid Values/Format: Numeric
 * @member {String} filingIca
 */
CreateCaseRequest.prototype['filingIca'] = undefined;

/**
 * Enter a Memo pertaining to the case.   Length: 1-13000   Valid Values/Format: Alphanumeric and Special Characters (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} memo
 */
CreateCaseRequest.prototype['memo'] = undefined;

/**
 * Enter a MessageText pertaining to the case.   CONDITIONAL: Applicable only for filing pre-arbitration and arbitration case for sender while creating the case.   Length: 1-100   Valid Values/Format: Alphanumeric and Special Characters (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} messageText
 */
CreateCaseRequest.prototype['messageText'] = undefined;

/**
 * Change reason code Flag.   CONDITIONAL: Applicable only for filing pre-arbitration and arbitration case for sender while creating the case.   Length: 1   Valid Values/Format: Y,N
 * @member {String} changeReasonCodeFlag
 */
CreateCaseRequest.prototype['changeReasonCodeFlag'] = undefined;

/**
 * Updated Chargeback Reason Code.   CONDITIONAL: Required and applicable for filing pre-arbitration and arbitration case for sender while creating the case and if changeReasonCodeFlag is Y.   Length: 2-4   Valid Values/Format: 4863,4899,2001,2002,2003,2004,2005,2008,2011,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,4801,4802,4807,4808,4809,4812,4831,4834,4835,4837,4840,4841,4842,4846,4847,4849,4850,4853,4854,4855,4856,4857,4859,4860,4862,4900,4901,4902,4903,4905,4908,2000,4870,4871,03,06,17,30,69,70,71,73,74,75,79,80,82,85,95,96,97,98,13,10,20,24,25,26,27,28,29
 * @member {module:model/CreateCaseRequest.UpdatedChargebackReasonCodeEnum} updatedChargebackReasonCode
 */
CreateCaseRequest.prototype['updatedChargebackReasonCode'] = undefined;

/**
 * Change reason Code reason.   CONDITIONAL: Required and applicable for filing pre-arbitration and arbitration case for sender while creating the case and if changeReasonCodeFlag is Y.   Length: 1-1000   Valid Values/Format: Alphanumeric and Special Characters (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} changeReasonCodeReason
 */
CreateCaseRequest.prototype['changeReasonCodeReason'] = undefined;

/**
 * The primary account number.   CONDITIONAL: This field is mandatory and applicable if the chargeback ref number field is not populated.   Length: 1-19   Valid Values/Format: Numeric
 * @member {String} primaryAccountNum
 */
CreateCaseRequest.prototype['primaryAccountNum'] = undefined;

/**
 * The acquirer reference number.   CONDITIONAL: This field is mandatory and applicable if case is created using primary account number.   Length: 1-23   Valid Values/Format: Numeric
 * @member {String} acquirerRefNum
 */
CreateCaseRequest.prototype['acquirerRefNum'] = undefined;

/**
 * Chargeback Reason Code.   CONDITIONAL: Required and applicable for filing pre-arbitration and arbitration case.   Length: 2-4   Valid Values/Format: 4863,4899,2001,2002,2003,2004,2005,2008,2011,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,4801,4802,4807,4808,4809,4812,4831,4834,4835,4837,4840,4841,4842,4846,4847,4849,4850,4853,4854,4855,4856,4857,4859,4860,4862,4900,4901,4902,4903,4905,4908,2000,4870,4871,03,06,17,30,69,70,71,73,74,75,79,80,82,85,95,96,97,98,13,10,20,24,25,26,27,28,29
 * @member {module:model/CreateCaseRequest.ChargebackReasonCodeEnum} chargebackReasonCode
 */
CreateCaseRequest.prototype['chargebackReasonCode'] = undefined;

/**
 * Merchant name.   CONDITIONAL: This is required and applicable for filing pre-arbitration and arbitration case.   Length: 0-100   Valid Values/Format: Alphanumeric and Special Characters (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)
 * @member {String} merchantName
 */
CreateCaseRequest.prototype['merchantName'] = undefined;

/**
 * Violation code.   CONDITIONAL: This is only applicable and mandatory in case of pre-compliance and compliance types of cases   Length: 1-20   Valid Values/Format: Alphanumeric and Special Character (.)
 * @member {String} violationCode
 */
CreateCaseRequest.prototype['violationCode'] = undefined;

/**
 * Violation Date.   CONDITIONAL: This is only applicable and mandatory in case of pre-compliance and compliance types of cases.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
 * @member {String} violationDate
 */
CreateCaseRequest.prototype['violationDate'] = undefined;

/**
 * Chargeback Date.   CONDITIONAL:  This is only applicable and mandatory in case of pre-compliance and compliance types of cases with a violation code of 1.4.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
 * @member {String} chargebackDate
 */
CreateCaseRequest.prototype['chargebackDate'] = undefined;

/**
 * Credit Date.   CONDITIONAL:  This is only applicable and mandatory in case of pre-compliance and compliance types of cases with a violation code of 1.4.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
 * @member {String} creditDate
 */
CreateCaseRequest.prototype['creditDate'] = undefined;

/**
 * @member {module:model/CaseFilingEbdfStructure} caseFilingEbdfDocuments
 */
CreateCaseRequest.prototype['caseFilingEbdfDocuments'] = undefined;





/**
 * Allowed values for the <code>caseType</code> property.
 * @enum {String}
 * @readonly
 */
CreateCaseRequest['CaseTypeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4"
};


/**
 * Allowed values for the <code>filingAs</code> property.
 * @enum {String}
 * @readonly
 */
CreateCaseRequest['FilingAsEnum'] = {

    /**
     * value: "I"
     * @const
     */
    "I": "I",

    /**
     * value: "A"
     * @const
     */
    "A": "A"
};


/**
 * Allowed values for the <code>updatedChargebackReasonCode</code> property.
 * @enum {String}
 * @readonly
 */
CreateCaseRequest['UpdatedChargebackReasonCodeEnum'] = {

    /**
     * value: "4863"
     * @const
     */
    "4863": "4863",

    /**
     * value: "4899"
     * @const
     */
    "4899": "4899",

    /**
     * value: "2001"
     * @const
     */
    "2001": "2001",

    /**
     * value: "2002"
     * @const
     */
    "2002": "2002",

    /**
     * value: "2003"
     * @const
     */
    "2003": "2003",

    /**
     * value: "2004"
     * @const
     */
    "2004": "2004",

    /**
     * value: "2005"
     * @const
     */
    "2005": "2005",

    /**
     * value: "2008"
     * @const
     */
    "2008": "2008",

    /**
     * value: "2011"
     * @const
     */
    "2011": "2011",

    /**
     * value: "2700"
     * @const
     */
    "2700": "2700",

    /**
     * value: "2701"
     * @const
     */
    "2701": "2701",

    /**
     * value: "2702"
     * @const
     */
    "2702": "2702",

    /**
     * value: "2703"
     * @const
     */
    "2703": "2703",

    /**
     * value: "2704"
     * @const
     */
    "2704": "2704",

    /**
     * value: "2705"
     * @const
     */
    "2705": "2705",

    /**
     * value: "2706"
     * @const
     */
    "2706": "2706",

    /**
     * value: "2707"
     * @const
     */
    "2707": "2707",

    /**
     * value: "2708"
     * @const
     */
    "2708": "2708",

    /**
     * value: "2709"
     * @const
     */
    "2709": "2709",

    /**
     * value: "2710"
     * @const
     */
    "2710": "2710",

    /**
     * value: "2711"
     * @const
     */
    "2711": "2711",

    /**
     * value: "2712"
     * @const
     */
    "2712": "2712",

    /**
     * value: "2713"
     * @const
     */
    "2713": "2713",

    /**
     * value: "4801"
     * @const
     */
    "4801": "4801",

    /**
     * value: "4802"
     * @const
     */
    "4802": "4802",

    /**
     * value: "4807"
     * @const
     */
    "4807": "4807",

    /**
     * value: "4808"
     * @const
     */
    "4808": "4808",

    /**
     * value: "4809"
     * @const
     */
    "4809": "4809",

    /**
     * value: "4812"
     * @const
     */
    "4812": "4812",

    /**
     * value: "4831"
     * @const
     */
    "4831": "4831",

    /**
     * value: "4834"
     * @const
     */
    "4834": "4834",

    /**
     * value: "4835"
     * @const
     */
    "4835": "4835",

    /**
     * value: "4837"
     * @const
     */
    "4837": "4837",

    /**
     * value: "4840"
     * @const
     */
    "4840": "4840",

    /**
     * value: "4841"
     * @const
     */
    "4841": "4841",

    /**
     * value: "4842"
     * @const
     */
    "4842": "4842",

    /**
     * value: "4846"
     * @const
     */
    "4846": "4846",

    /**
     * value: "4847"
     * @const
     */
    "4847": "4847",

    /**
     * value: "4849"
     * @const
     */
    "4849": "4849",

    /**
     * value: "4850"
     * @const
     */
    "4850": "4850",

    /**
     * value: "4853"
     * @const
     */
    "4853": "4853",

    /**
     * value: "4854"
     * @const
     */
    "4854": "4854",

    /**
     * value: "4855"
     * @const
     */
    "4855": "4855",

    /**
     * value: "4856"
     * @const
     */
    "4856": "4856",

    /**
     * value: "4857"
     * @const
     */
    "4857": "4857",

    /**
     * value: "4859"
     * @const
     */
    "4859": "4859",

    /**
     * value: "4860"
     * @const
     */
    "4860": "4860",

    /**
     * value: "4862"
     * @const
     */
    "4862": "4862",

    /**
     * value: "4900"
     * @const
     */
    "4900": "4900",

    /**
     * value: "4901"
     * @const
     */
    "4901": "4901",

    /**
     * value: "4902"
     * @const
     */
    "4902": "4902",

    /**
     * value: "4903"
     * @const
     */
    "4903": "4903",

    /**
     * value: "4905"
     * @const
     */
    "4905": "4905",

    /**
     * value: "4908"
     * @const
     */
    "4908": "4908",

    /**
     * value: "2000"
     * @const
     */
    "2000": "2000",

    /**
     * value: "4870"
     * @const
     */
    "4870": "4870",

    /**
     * value: "4871"
     * @const
     */
    "4871": "4871",

    /**
     * value: "03"
     * @const
     */
    "03": "03",

    /**
     * value: "06"
     * @const
     */
    "06": "06",

    /**
     * value: "17"
     * @const
     */
    "17": "17",

    /**
     * value: "30"
     * @const
     */
    "30": "30",

    /**
     * value: "69"
     * @const
     */
    "69": "69",

    /**
     * value: "70"
     * @const
     */
    "70": "70",

    /**
     * value: "71"
     * @const
     */
    "71": "71",

    /**
     * value: "73"
     * @const
     */
    "73": "73",

    /**
     * value: "74"
     * @const
     */
    "74": "74",

    /**
     * value: "75"
     * @const
     */
    "75": "75",

    /**
     * value: "79"
     * @const
     */
    "79": "79",

    /**
     * value: "80"
     * @const
     */
    "80": "80",

    /**
     * value: "82"
     * @const
     */
    "82": "82",

    /**
     * value: "85"
     * @const
     */
    "85": "85",

    /**
     * value: "95"
     * @const
     */
    "95": "95",

    /**
     * value: "96"
     * @const
     */
    "96": "96",

    /**
     * value: "97"
     * @const
     */
    "97": "97",

    /**
     * value: "98"
     * @const
     */
    "98": "98",

    /**
     * value: "13"
     * @const
     */
    "13": "13",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "20"
     * @const
     */
    "20": "20",

    /**
     * value: "24"
     * @const
     */
    "24": "24",

    /**
     * value: "25"
     * @const
     */
    "25": "25",

    /**
     * value: "26"
     * @const
     */
    "26": "26",

    /**
     * value: "27"
     * @const
     */
    "27": "27",

    /**
     * value: "28"
     * @const
     */
    "28": "28",

    /**
     * value: "29"
     * @const
     */
    "29": "29"
};


/**
 * Allowed values for the <code>chargebackReasonCode</code> property.
 * @enum {String}
 * @readonly
 */
CreateCaseRequest['ChargebackReasonCodeEnum'] = {

    /**
     * value: "4863"
     * @const
     */
    "4863": "4863",

    /**
     * value: "4899"
     * @const
     */
    "4899": "4899",

    /**
     * value: "2001"
     * @const
     */
    "2001": "2001",

    /**
     * value: "2002"
     * @const
     */
    "2002": "2002",

    /**
     * value: "2003"
     * @const
     */
    "2003": "2003",

    /**
     * value: "2004"
     * @const
     */
    "2004": "2004",

    /**
     * value: "2005"
     * @const
     */
    "2005": "2005",

    /**
     * value: "2008"
     * @const
     */
    "2008": "2008",

    /**
     * value: "2011"
     * @const
     */
    "2011": "2011",

    /**
     * value: "2700"
     * @const
     */
    "2700": "2700",

    /**
     * value: "2701"
     * @const
     */
    "2701": "2701",

    /**
     * value: "2702"
     * @const
     */
    "2702": "2702",

    /**
     * value: "2703"
     * @const
     */
    "2703": "2703",

    /**
     * value: "2704"
     * @const
     */
    "2704": "2704",

    /**
     * value: "2705"
     * @const
     */
    "2705": "2705",

    /**
     * value: "2706"
     * @const
     */
    "2706": "2706",

    /**
     * value: "2707"
     * @const
     */
    "2707": "2707",

    /**
     * value: "2708"
     * @const
     */
    "2708": "2708",

    /**
     * value: "2709"
     * @const
     */
    "2709": "2709",

    /**
     * value: "2710"
     * @const
     */
    "2710": "2710",

    /**
     * value: "2711"
     * @const
     */
    "2711": "2711",

    /**
     * value: "2712"
     * @const
     */
    "2712": "2712",

    /**
     * value: "2713"
     * @const
     */
    "2713": "2713",

    /**
     * value: "4801"
     * @const
     */
    "4801": "4801",

    /**
     * value: "4802"
     * @const
     */
    "4802": "4802",

    /**
     * value: "4807"
     * @const
     */
    "4807": "4807",

    /**
     * value: "4808"
     * @const
     */
    "4808": "4808",

    /**
     * value: "4809"
     * @const
     */
    "4809": "4809",

    /**
     * value: "4812"
     * @const
     */
    "4812": "4812",

    /**
     * value: "4831"
     * @const
     */
    "4831": "4831",

    /**
     * value: "4834"
     * @const
     */
    "4834": "4834",

    /**
     * value: "4835"
     * @const
     */
    "4835": "4835",

    /**
     * value: "4837"
     * @const
     */
    "4837": "4837",

    /**
     * value: "4840"
     * @const
     */
    "4840": "4840",

    /**
     * value: "4841"
     * @const
     */
    "4841": "4841",

    /**
     * value: "4842"
     * @const
     */
    "4842": "4842",

    /**
     * value: "4846"
     * @const
     */
    "4846": "4846",

    /**
     * value: "4847"
     * @const
     */
    "4847": "4847",

    /**
     * value: "4849"
     * @const
     */
    "4849": "4849",

    /**
     * value: "4850"
     * @const
     */
    "4850": "4850",

    /**
     * value: "4853"
     * @const
     */
    "4853": "4853",

    /**
     * value: "4854"
     * @const
     */
    "4854": "4854",

    /**
     * value: "4855"
     * @const
     */
    "4855": "4855",

    /**
     * value: "4856"
     * @const
     */
    "4856": "4856",

    /**
     * value: "4857"
     * @const
     */
    "4857": "4857",

    /**
     * value: "4859"
     * @const
     */
    "4859": "4859",

    /**
     * value: "4860"
     * @const
     */
    "4860": "4860",

    /**
     * value: "4862"
     * @const
     */
    "4862": "4862",

    /**
     * value: "4900"
     * @const
     */
    "4900": "4900",

    /**
     * value: "4901"
     * @const
     */
    "4901": "4901",

    /**
     * value: "4902"
     * @const
     */
    "4902": "4902",

    /**
     * value: "4903"
     * @const
     */
    "4903": "4903",

    /**
     * value: "4905"
     * @const
     */
    "4905": "4905",

    /**
     * value: "4908"
     * @const
     */
    "4908": "4908",

    /**
     * value: "2000"
     * @const
     */
    "2000": "2000",

    /**
     * value: "4870"
     * @const
     */
    "4870": "4870",

    /**
     * value: "4871"
     * @const
     */
    "4871": "4871",

    /**
     * value: "03"
     * @const
     */
    "03": "03",

    /**
     * value: "06"
     * @const
     */
    "06": "06",

    /**
     * value: "17"
     * @const
     */
    "17": "17",

    /**
     * value: "30"
     * @const
     */
    "30": "30",

    /**
     * value: "69"
     * @const
     */
    "69": "69",

    /**
     * value: "70"
     * @const
     */
    "70": "70",

    /**
     * value: "71"
     * @const
     */
    "71": "71",

    /**
     * value: "73"
     * @const
     */
    "73": "73",

    /**
     * value: "74"
     * @const
     */
    "74": "74",

    /**
     * value: "75"
     * @const
     */
    "75": "75",

    /**
     * value: "79"
     * @const
     */
    "79": "79",

    /**
     * value: "80"
     * @const
     */
    "80": "80",

    /**
     * value: "82"
     * @const
     */
    "82": "82",

    /**
     * value: "85"
     * @const
     */
    "85": "85",

    /**
     * value: "95"
     * @const
     */
    "95": "95",

    /**
     * value: "96"
     * @const
     */
    "96": "96",

    /**
     * value: "97"
     * @const
     */
    "97": "97",

    /**
     * value: "98"
     * @const
     */
    "98": "98",

    /**
     * value: "13"
     * @const
     */
    "13": "13",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "20"
     * @const
     */
    "20": "20",

    /**
     * value: "24"
     * @const
     */
    "24": "24",

    /**
     * value: "25"
     * @const
     */
    "25": "25",

    /**
     * value: "26"
     * @const
     */
    "26": "26",

    /**
     * value: "27"
     * @const
     */
    "27": "27",

    /**
     * value: "28"
     * @const
     */
    "28": "28",

    /**
     * value: "29"
     * @const
     */
    "29": "29"
};



export default CreateCaseRequest;

