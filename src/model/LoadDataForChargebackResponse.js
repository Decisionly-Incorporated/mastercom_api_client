/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChargebackAmountNameValueDetail from './ChargebackAmountNameValueDetail';
import ChargebackDocIndicatorsNameValueDetail from './ChargebackDocIndicatorsNameValueDetail';
import ChargebackMessageTextsNameValueDetail from './ChargebackMessageTextsNameValueDetail';
import ChargebackReasonCodesNameValueDetail from './ChargebackReasonCodesNameValueDetail';
import CurrenciesNameValueDetail from './CurrenciesNameValueDetail';

/**
 * The LoadDataForChargebackResponse model module.
 * @module model/LoadDataForChargebackResponse
 * @version v6
 */
class LoadDataForChargebackResponse {
    /**
     * Constructs a new <code>LoadDataForChargebackResponse</code>.
     * @alias module:model/LoadDataForChargebackResponse
     */
    constructor() { 
        
        LoadDataForChargebackResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoadDataForChargebackResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoadDataForChargebackResponse} obj Optional instance to populate.
     * @return {module:model/LoadDataForChargebackResponse} The populated <code>LoadDataForChargebackResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoadDataForChargebackResponse();

            if (data.hasOwnProperty('currencies')) {
                obj['currencies'] = ApiClient.convertToType(data['currencies'], [CurrenciesNameValueDetail]);
            }
            if (data.hasOwnProperty('docIndicators')) {
                obj['docIndicators'] = ApiClient.convertToType(data['docIndicators'], [ChargebackDocIndicatorsNameValueDetail]);
            }
            if (data.hasOwnProperty('messageTexts')) {
                obj['messageTexts'] = ApiClient.convertToType(data['messageTexts'], [ChargebackMessageTextsNameValueDetail]);
            }
            if (data.hasOwnProperty('reasonCodes')) {
                obj['reasonCodes'] = ApiClient.convertToType(data['reasonCodes'], [ChargebackReasonCodesNameValueDetail]);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ChargebackAmountNameValueDetail.constructFromObject(data['amount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoadDataForChargebackResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoadDataForChargebackResponse</code>.
     */
    static validateJSON(data) {
        if (data['currencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currencies'])) {
                throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
            }
            // validate the optional field `currencies` (array)
            for (const item of data['currencies']) {
                CurrenciesNameValueDetail.validateJSON(item);
            };
        }
        if (data['docIndicators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['docIndicators'])) {
                throw new Error("Expected the field `docIndicators` to be an array in the JSON data but got " + data['docIndicators']);
            }
            // validate the optional field `docIndicators` (array)
            for (const item of data['docIndicators']) {
                ChargebackDocIndicatorsNameValueDetail.validateJSON(item);
            };
        }
        if (data['messageTexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messageTexts'])) {
                throw new Error("Expected the field `messageTexts` to be an array in the JSON data but got " + data['messageTexts']);
            }
            // validate the optional field `messageTexts` (array)
            for (const item of data['messageTexts']) {
                ChargebackMessageTextsNameValueDetail.validateJSON(item);
            };
        }
        if (data['reasonCodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reasonCodes'])) {
                throw new Error("Expected the field `reasonCodes` to be an array in the JSON data but got " + data['reasonCodes']);
            }
            // validate the optional field `reasonCodes` (array)
            for (const item of data['reasonCodes']) {
                ChargebackReasonCodesNameValueDetail.validateJSON(item);
            };
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          ChargebackAmountNameValueDetail.validateJSON(data['amount']);
        }

        return true;
    }


}



/**
 * List of valid currencies
 * @member {Array.<module:model/CurrenciesNameValueDetail>} currencies
 */
LoadDataForChargebackResponse.prototype['currencies'] = undefined;

/**
 * List of valid doc indicators
 * @member {Array.<module:model/ChargebackDocIndicatorsNameValueDetail>} docIndicators
 */
LoadDataForChargebackResponse.prototype['docIndicators'] = undefined;

/**
 * List of valid message texts
 * @member {Array.<module:model/ChargebackMessageTextsNameValueDetail>} messageTexts
 */
LoadDataForChargebackResponse.prototype['messageTexts'] = undefined;

/**
 * List of valid reason codes
 * @member {Array.<module:model/ChargebackReasonCodesNameValueDetail>} reasonCodes
 */
LoadDataForChargebackResponse.prototype['reasonCodes'] = undefined;

/**
 * @member {module:model/ChargebackAmountNameValueDetail} amount
 */
LoadDataForChargebackResponse.prototype['amount'] = undefined;






export default LoadDataForChargebackResponse;

