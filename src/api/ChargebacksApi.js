/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChargebackImageStatusRequest from '../model/ChargebackImageStatusRequest';
import ChargebackImageStatusResponse from '../model/ChargebackImageStatusResponse';
import ChargebackMarkProcessedRequest from '../model/ChargebackMarkProcessedRequest';
import ChargebackMarkProcessedResponse from '../model/ChargebackMarkProcessedResponse';
import ChargebackResponse from '../model/ChargebackResponse';
import ChargebackStatusRequest from '../model/ChargebackStatusRequest';
import ChargebackStatusResponse from '../model/ChargebackStatusResponse';
import CreateChargebackRequest from '../model/CreateChargebackRequest';
import DocumentResponseStructure from '../model/DocumentResponseStructure';
import Errors from '../model/Errors';
import LoadDataForChargebackResponse from '../model/LoadDataForChargebackResponse';
import LoadDataForChargebacksRequest from '../model/LoadDataForChargebacksRequest';
import UpdateChargebackRequest from '../model/UpdateChargebackRequest';

/**
* Chargebacks service.
* @module api/ChargebacksApi
* @version v6
*/
export default class ChargebacksApi {

    /**
    * Constructs a new ChargebacksApi. 
    * @alias module:api/ChargebacksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgeChargebacks operation.
     * @callback module:api/ChargebacksApi~acknowledgeChargebacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargebackMarkProcessedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to acknowledge a chargeback or second presentment. Acknowledging a chargeback or second presentment moves the claim from the Unworked queue to the Worked queue. Acknowledging the chargeback or second presentment does not close the claim. Issuers and acquirers may take further actions on acknowledged claims.   Note: for efficient processing, issuers and acquirers should send 100 acknowledgments or fewer in a single request.
     * @param {module:model/ChargebackMarkProcessedRequest} body Chargeback Receiver information
     * @param {module:api/ChargebacksApi~acknowledgeChargebacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargebackMarkProcessedResponse}
     */
    acknowledgeChargebacks(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling acknowledgeChargebacks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChargebackMarkProcessedResponse;
      return this.apiClient.callApi(
        '/v6/chargebacks/acknowledge', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChargeback operation.
     * @callback module:api/ChargebacksApi~createChargebackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargebackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to create chargebacks and second presentments and optionally to upload supporting documents. Issuers and acquirers may use the parameters in the request to automatically generate the Expedited Billing Dispute Form (EBDF) and attach it to the claim.   Note: issuers should not attach documents while requesting the automatic generation of the EBDF. Therefore, if issuers need to submit the EBDF with additional documentation, they must complete the EBDF and include it in a ZIP file with any additional documentation.   Note: If the API call to this endpoint times out, customers should use the Chargeback Status or Retrieve Claim endpoint to determine the success or failure of document processing.
     * @param {String} claimId Claim Id where the chargeback will be added   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/CreateChargebackRequest} body Create Chargeback information
     * @param {module:api/ChargebacksApi~createChargebackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargebackResponse}
     */
    createChargeback(claimId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling createChargeback");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createChargeback");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChargebackResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/chargebacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChargebackReversal operation.
     * @callback module:api/ChargebacksApi~createChargebackReversalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargebackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to reverse an existing chargeback when they create a chargeback in error.   Note: issuers and acquirers may only create reversals on chargebacks after the chargebacks are processed by the Global Clearing Management System (GCMS).
     * @param {String} claimId Claim Id for the chargeback.   Length: 1-19   Valid Values/Format: Numeric
     * @param {String} chargebackId Chargeback Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:api/ChargebacksApi~createChargebackReversalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargebackResponse}
     */
    createChargebackReversal(claimId, chargebackId, callback) {
      let postBody = null;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling createChargebackReversal");
      }
      // verify the required parameter 'chargebackId' is set
      if (chargebackId === undefined || chargebackId === null) {
        throw new Error("Missing the required parameter 'chargebackId' when calling createChargebackReversal");
      }

      let pathParams = {
        'claim-id': claimId,
        'chargeback-id': chargebackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChargebackResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/chargebacks/{chargeback-id}/reversal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChargebackDoc operation.
     * @callback module:api/ChargebacksApi~getChargebackDocCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponseStructure} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to retrieve documents in a desired format associated with any type of chargeback.
     * @param {String} claimId Claim Id for the chargeback.   Length: 1-19   Valid Values/Format: Numeric
     * @param {String} chargebackId Chargeback Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/String} format File Format.   Length: 8-11   Valid Values/Format: ORIGINAL, MERGED_TIFF, MERGED_PDF
     * @param {module:api/ChargebacksApi~getChargebackDocCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponseStructure}
     */
    getChargebackDoc(claimId, chargebackId, format, callback) {
      let postBody = null;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getChargebackDoc");
      }
      // verify the required parameter 'chargebackId' is set
      if (chargebackId === undefined || chargebackId === null) {
        throw new Error("Missing the required parameter 'chargebackId' when calling getChargebackDoc");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getChargebackDoc");
      }

      let pathParams = {
        'claim-id': claimId,
        'chargeback-id': chargebackId
      };
      let queryParams = {
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponseStructure;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/chargebacks/{chargeback-id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataForCreateChargeback operation.
     * @callback module:api/ChargebacksApi~getDataForCreateChargebackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadDataForChargebackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to obtain information about a potential first chargeback or second presentment prior to creating the chargeback. If the issuer or acquirer decides to create the chargeback, the issuer or acquirer should use the Create endpoint for chargebacks.
     * @param {String} claimId Claim Id for the chargeback to be created.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/LoadDataForChargebacksRequest} body The type of chargeback.  The following values are valid...CHARGEBACK, SECOND_PRESENTMENT.  The default value is CHARGEBACK.
     * @param {module:api/ChargebacksApi~getDataForCreateChargebackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadDataForChargebackResponse}
     */
    getDataForCreateChargeback(claimId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getDataForCreateChargeback");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getDataForCreateChargeback");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoadDataForChargebackResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/chargebacks/loaddataforchargebacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveChargebackImageStatus operation.
     * @callback module:api/ChargebacksApi~retrieveChargebackImageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargebackImageStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to search for documents that have a specific status (completed, pending, failed, unavailable, and document not applicable) for chargebacks.   Note: For customers with high volumes of chargebacks or large numbers of BINs, Mastercom recommends using the Chargebacks Status endpoint rather than the Chargebacks Image Status endpoint.
     * @param {module:model/ChargebackImageStatusRequest} body Chargeback information
     * @param {module:api/ChargebacksApi~retrieveChargebackImageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargebackImageStatusResponse}
     */
    retrieveChargebackImageStatus(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling retrieveChargebackImageStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChargebackImageStatusResponse;
      return this.apiClient.callApi(
        '/v6/chargebacks/imagestatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveChargebackStatus operation.
     * @callback module:api/ChargebacksApi~retrieveChargebackStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargebackStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to search for the status of documents of a specific list of claim IDs and chargeback IDs.   Note: issuers and acquirers may send a maximum of 2,000 chargeback IDs within a single request.
     * @param {module:model/ChargebackStatusRequest} body Chargeback information
     * @param {module:api/ChargebacksApi~retrieveChargebackStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargebackStatusResponse}
     */
    retrieveChargebackStatus(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling retrieveChargebackStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChargebackStatusResponse;
      return this.apiClient.callApi(
        '/v6/chargebacks/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChargeback operation.
     * @callback module:api/ChargebacksApi~updateChargebackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargebackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to update an existing chargeback with memos or documents if they did not attach memos or documents when creating the chargeback.   Note: If the API call to this endpoint times out, customers should use the Chargeback Status or Retrieve Claim endpoint to determine the success or failure of document processing.
     * @param {String} claimId Claim Id for the chargeback.   Length: 1-19   Valid Values/Format: Numeric
     * @param {String} chargebackId Chargeback Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/UpdateChargebackRequest} body Update Chargeback information
     * @param {module:api/ChargebacksApi~updateChargebackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargebackResponse}
     */
    updateChargeback(claimId, chargebackId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling updateChargeback");
      }
      // verify the required parameter 'chargebackId' is set
      if (chargebackId === undefined || chargebackId === null) {
        throw new Error("Missing the required parameter 'chargebackId' when calling updateChargeback");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateChargeback");
      }

      let pathParams = {
        'claim-id': claimId,
        'chargeback-id': chargebackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChargebackResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/chargebacks/{chargeback-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
