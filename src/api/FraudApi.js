/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFraudMasterCardRequest from '../model/CreateFraudMasterCardRequest';
import Errors from '../model/Errors';
import FraudResponse from '../model/FraudResponse';
import LoadDataForFraudResponse from '../model/LoadDataForFraudResponse';

/**
* Fraud service.
* @module api/FraudApi
* @version v6
*/
export default class FraudApi {

    /**
    * Constructs a new FraudApi. 
    * @alias module:api/FraudApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFraudMasterCard operation.
     * @callback module:api/FraudApi~createFraudMasterCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FraudResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An issuer uses this endpoint to create a new fraud item when the issuer determines that a transaction was fraudulent.   Note: Mastercom allows issuers to create fraud items in the Fraud and Loss database. However, issuers must use the Fraud and Loss application to make further updates to fraud items.
     * @param {String} claimId Claim Id for the fraud item.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/CreateFraudMasterCardRequest} body Create Fraud MasterCard Request
     * @param {module:api/FraudApi~createFraudMasterCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FraudResponse}
     */
    createFraudMasterCard(claimId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling createFraudMasterCard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFraudMasterCard");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FraudResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/fraud/mastercard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataForCreateFraud operation.
     * @callback module:api/FraudApi~getDataForCreateFraudCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadDataForFraudResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers use this endpoint to obtain fraud-related information associated with a claim before creating a fraud item for the claim.
     * @param {String} claimId Claim Id for the fraud item.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:api/FraudApi~getDataForCreateFraudCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadDataForFraudResponse}
     */
    getDataForCreateFraud(claimId, callback) {
      let postBody = null;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getDataForCreateFraud");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoadDataForFraudResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/fraud/loaddataforfraud', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
