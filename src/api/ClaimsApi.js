/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClaimDetail from '../model/ClaimDetail';
import ClaimResponse from '../model/ClaimResponse';
import CreateClaimRequest from '../model/CreateClaimRequest';
import Errors from '../model/Errors';
import UpdateClaimRequest from '../model/UpdateClaimRequest';

/**
* Claims service.
* @module api/ClaimsApi
* @version v6
*/
export default class ClaimsApi {

    /**
    * Constructs a new ClaimsApi. 
    * @alias module:api/ClaimsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createClaim operation.
     * @callback module:api/ClaimsApi~createClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClaimResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers use this endpoint to create a new claim, which is required before creating a retrieval request or a first chargeback. If an issuer attempts to create a duplicate claim on an original transaction, the issuer receives a error message with the claim ID of the existing claim. Acquirers are not able to create claims. They receive claims from disputes that issuers initiate.   Note: issuers must have a first presentment in order to create a claim.   Note: issuers cannot create claims on first presentments that acquirers have reversed.
     * @param {module:model/CreateClaimRequest} body Create Claim Request
     * @param {module:api/ClaimsApi~createClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClaimResponse}
     */
    createClaim(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClaim");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClaimResponse;
      return this.apiClient.callApi(
        '/v6/claims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClaimDetail operation.
     * @callback module:api/ClaimsApi~getClaimDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClaimDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to retrieve details for an existing claim, including any cases with which the claim is associated.   Note: the Retrieve endpoint for claims contains document statuses (completed, pending, failed, unavailable, and document not applicable) for all documents attached to dispute events within a claim. Issuers and acquirers do not have to make a separate call to obtain document statuses, making the use of this endpoint efficient.
     * @param {String} claimId Claim Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:api/ClaimsApi~getClaimDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClaimDetail}
     */
    getClaimDetail(claimId, callback) {
      let postBody = null;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getClaimDetail");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClaimDetail;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClaim operation.
     * @callback module:api/ClaimsApi~updateClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClaimResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers use this endpoint to take an action (reopen or close) on an existing claim.
     * @param {String} claimId Claim Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/UpdateClaimRequest} body Update Claim Request
     * @param {module:api/ClaimsApi~updateClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClaimResponse}
     */
    updateClaim(claimId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling updateClaim");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateClaim");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClaimResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
