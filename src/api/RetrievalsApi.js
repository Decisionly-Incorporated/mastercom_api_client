/**
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcquirerFulfillmentRequest from '../model/AcquirerFulfillmentRequest';
import AcquirerFulfillmentResponse from '../model/AcquirerFulfillmentResponse';
import CreateRetrievalRequest from '../model/CreateRetrievalRequest';
import CreateRetrievalResponse from '../model/CreateRetrievalResponse';
import DocumentResponseStructure from '../model/DocumentResponseStructure';
import Errors from '../model/Errors';
import IssuerFulfillmentRequest from '../model/IssuerFulfillmentRequest';
import LoadDataForRetrievalResponse from '../model/LoadDataForRetrievalResponse';
import RetrievalResponse from '../model/RetrievalResponse';
import RetrievalStatusRequest from '../model/RetrievalStatusRequest';
import RetrievalStatusResponse from '../model/RetrievalStatusResponse';
import RetrievalsImageStatusRequest from '../model/RetrievalsImageStatusRequest';
import RetrievalsImageStatusResponse from '../model/RetrievalsImageStatusResponse';

/**
* Retrievals service.
* @module api/RetrievalsApi
* @version v6
*/
export default class RetrievalsApi {

    /**
    * Constructs a new RetrievalsApi. 
    * @alias module:api/RetrievalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acqFulfillRetrievalRequest operation.
     * @callback module:api/RetrievalsApi~acqFulfillRetrievalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcquirerFulfillmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * After receiving a retrieval request from an issuer, an acquirer uses this endpoint to either provide a copy or substitute draft of the transaction information document (TID) or provide a reason for failing to fulfill the retrieval request.   NOTE: Below acquirerResponseCd codes will be accepted starting on February 26th, 2023.<br>  A - Funds Movement Request<br>  B - Refunded<br>  C - Initiating Refund<br>  E - Reject Collaboration<br>  F - IIAS Unfulfillable<br>  G - IIAS Invalid request information<br>  H - IIAS Fulfilled outside MasterCom system
     * @param {String} claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric
     * @param {String} requestId Request Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/AcquirerFulfillmentRequest} body Acquirer Retrieval Fulfillment information
     * @param {module:api/RetrievalsApi~acqFulfillRetrievalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcquirerFulfillmentResponse}
     */
    acqFulfillRetrievalRequest(claimId, requestId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling acqFulfillRetrievalRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling acqFulfillRetrievalRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling acqFulfillRetrievalRequest");
      }

      let pathParams = {
        'claim-id': claimId,
        'request-id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AcquirerFulfillmentResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/retrievalrequests/{request-id}/fulfillments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRetrievalRequest operation.
     * @callback module:api/RetrievalsApi~createRetrievalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRetrievalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prior to creating a chargeback, an issuer uses this endpoint to create a retrieval request for the acquirer to fulfill by providing a copy of the transaction information document (TID). The TID is used to satisfy a cardholder's inquiry or to satisfy an issuer's investigation of an original transaction.   NOTE: an issuer is not required to create a retrieval request in order to create a first chargeback on a claim.   NOTE: Below retrievalRequestReason codes will be accepted until October 23th, 2021.<br>  6305 - Cardholder does not agree with amount billed<br>  6321 - Cardholder does not recognize transaction<br>  6322 - Request Transaction Certificate for a chip transaction<br>  6323 - Cardholder needs information for personal records<br>  6341 - Fraud investigation<br>  6342 - Potential chargeback or compliance documentation is required<br>  6343 - IIAS Audit (for healthcare transactions only)<br>  6390 - Identifies a syntax error return   NOTE: Below retrievalRequestReason code will be accepted for creation of retrieval request starting on October 24th, 2021.<br>  6343 - IIAS Audit (for healthcare transactions only)
     * @param {String} claimId Claim Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/CreateRetrievalRequest} body Create Retrieval Request
     * @param {module:api/RetrievalsApi~createRetrievalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRetrievalResponse}
     */
    createRetrievalRequest(claimId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling createRetrievalRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRetrievalRequest");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRetrievalResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/retrievalrequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataForCreateRetrievalRequest operation.
     * @callback module:api/RetrievalsApi~getDataForCreateRetrievalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadDataForRetrievalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An issuer uses this endpoint to retrieve values associated with a claim in preparation for creating a retrieval request.
     * @param {String} claimId Claim Id for the retrieval rrequest.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:api/RetrievalsApi~getDataForCreateRetrievalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadDataForRetrievalResponse}
     */
    getDataForCreateRetrievalRequest(claimId, callback) {
      let postBody = null;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getDataForCreateRetrievalRequest");
      }

      let pathParams = {
        'claim-id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoadDataForRetrievalResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/retrievalrequests/loaddataforretrievalrequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetrievalDoc operation.
     * @callback module:api/RetrievalsApi~getRetrievalDocCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponseStructure} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to retrieve all documents from acquirers associated with retrieval request fulfillment.
     * @param {String} claimId The Claim Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {String} requestId The Request Id.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/String} format File Format.   Length: 8-11   Valid Values/Format: ORIGINAL, MERGED_TIFF, MERGED_PDF
     * @param {module:api/RetrievalsApi~getRetrievalDocCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponseStructure}
     */
    getRetrievalDoc(claimId, requestId, format, callback) {
      let postBody = null;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling getRetrievalDoc");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getRetrievalDoc");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getRetrievalDoc");
      }

      let pathParams = {
        'claim-id': claimId,
        'request-id': requestId
      };
      let queryParams = {
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponseStructure;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/retrievalrequests/{request-id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuerResponseRetrievalRequest operation.
     * @callback module:api/RetrievalsApi~issuerResponseRetrievalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * After an acquirer fulfills a retrieval request, an issuer uses this endpoint to approve or reject a retrieval request fulfillment. The issuer approves the fulfillment or rejects the fulfillment if the documentation does not meet requirements.
     * @param {String} claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric
     * @param {String} requestId Request Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric
     * @param {module:model/IssuerFulfillmentRequest} body Issuer Fulfillment Response
     * @param {module:api/RetrievalsApi~issuerResponseRetrievalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievalResponse}
     */
    issuerResponseRetrievalRequest(claimId, requestId, body, callback) {
      let postBody = body;
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling issuerResponseRetrievalRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling issuerResponseRetrievalRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuerResponseRetrievalRequest");
      }

      let pathParams = {
        'claim-id': claimId,
        'request-id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrievalResponse;
      return this.apiClient.callApi(
        '/v6/claims/{claim-id}/retrievalrequests/{request-id}/fulfillments/response', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveFulfillmentImageStatus operation.
     * @callback module:api/RetrievalsApi~retrieveFulfillmentImageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievalsImageStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to search for documents that have a specific status (completed, pending, failed, unavailable, and document not applicable) for retrieval requests.   Note: For customers with high volumes of fulfillments or large numbers of BINs, Mastercom recommends using the Retrieval Fullfilment Status endpoint rather than the Retrieval Fullfilment Image Status endpoint.
     * @param {module:model/RetrievalsImageStatusRequest} body Retrieval information
     * @param {module:api/RetrievalsApi~retrieveFulfillmentImageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievalsImageStatusResponse}
     */
    retrieveFulfillmentImageStatus(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling retrieveFulfillmentImageStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrievalsImageStatusResponse;
      return this.apiClient.callApi(
        '/v6/retrievalrequests/imagestatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveFulfillmentStatus operation.
     * @callback module:api/RetrievalsApi~retrieveFulfillmentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievalStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issuers and acquirers use this endpoint to search for the status of documents that are associated with a specific list of retrieval requests.   Note: issuers and acquirers may send a maximum of 2,000 retrieval fulfillment IDs within a single request.
     * @param {module:model/RetrievalStatusRequest} body Retrieval information
     * @param {module:api/RetrievalsApi~retrieveFulfillmentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievalStatusResponse}
     */
    retrieveFulfillmentStatus(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling retrieveFulfillmentStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrievalStatusResponse;
      return this.apiClient.callApi(
        '/v6/retrievalrequests/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
